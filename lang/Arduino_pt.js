'use strict';
goog.provide ( 'Blockly.Msg.fr');
goog.require ( 'Blockly.Msg');
// Electron window
Blockly.Msg.com1 = "Selecione a porta USB";
Blockly.Msg.com2 = "üîî Selecione a porta USB" ;
Blockly.Msg.check = "Compilar...";
Blockly.Msg.upload = "Enviar...";
Blockly.Msg.error = "üîî ERRO: Blocos n√£o conectados";
Blockly.Msg.verif = "üîî Confira o c√≥digo primeiro "
Blockly.Msg.save = "Salvar como ...";
Blockly.Msg.update = "Atualizar";
Blockly.Msg.new_update = "Uma nova vers√£ est√° dispon√≠vel, voc√™ quer baixar e instalar agora?" ;
Blockly.Msg.yes = "sim";
Blockly.Msg.no = "n√£o";
Blockly.Msg.uptodate = "üíØ Vers√£o atualizada!" ;
Blockly.Msg.download = "Download completo, a aplica√ß√£o ir√° instalar e reiniciar ..."
// common to all blocks
Blockly.Msg.HELPURL = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pin = "no pino";
Blockly.Msg._AT = "at√©";
Blockly.Msg.AV = "frente";
Blockly.Msg.AR = "para tr√°s";
Blockly.Msg.high = "HIGH"; // do not translate
Blockly.Msg.low = "LOW"; // do not translate
Blockly.Msg.right = "direita";
Blockly.Msg.left = "esquerda";
Blockly.Msg.LetR = "direita & esquerda";
Blockly.Msg.direction = "dire√ß√£o";
Blockly.Msg.vitesse = "velocidade ";
// categories (menu)
Blockly.Msg.CAT_STOCKAGE = "‚äû Armazenamento";
Blockly.Msg.CAT_numerique = "- Digital";
Blockly.Msg.CAT_analogique = "~ Analog";
Blockly.Msg.CAT_wifi = "Ôº† Wifi";
Blockly.Msg.CAT_TAB = "‚ñ¶ Table";
Blockly.Msg.CAT_list = "‚ñ§ Lista";
Blockly.Msg.CAT_servo = "‚Ü∑ Servo";
Blockly.Msg.CAT_del = "‚òÑ LED";
Blockly.Msg.CAT_LOGIC = "‚áã Logic";
Blockly.Msg.CAT_MATH = "‚àë Math";
Blockly.Msg.CAT_TEXT = "‚ùù Text";
Blockly.Msg.CAT_VARIABLES = "‚Üù Vari√°vel";
Blockly.Msg.CAT_FUNCTIONS = "‚à¨ Fun√ß√£o";
Blockly.Msg.CAT_ARDUINO = "‚àû Estrutura";
Blockly.Msg.CAT_ARDUINO_IN = "‚áÖ Entrada/Sa√≠da";
Blockly.Msg.CAT_ARDUINO_OUT = "‚ò∫ Fechar";
Blockly.Msg.CAT_ARDUINO_TIME = "‚óå Time";
Blockly.Msg.CAT_actionneur = "‚Üª Motor";
Blockly.Msg.CAT_com = "‚òé Comunica√ß√£o";
Blockly.Msg.CAT_ARDUINO_COMM_SERIAL = "- Serial";
Blockly.Msg.CAT_ARDUINO_COMM_SOFTSERIAL = "- Soft Serial";
Blockly.Msg.CAT_ARDUINO_moteur="‚Üª Motor DC";
Blockly.Msg.CAT_ultrason = "‚á£ Sensor";
Blockly.Msg.CAT_bluetooth = "‚òè Bluetooth";
Blockly.Msg.CAT_ARDUINO_matrice8x8 = "‚ñë LED Mouth";
Blockly.Msg.CAT_ARDUINO_matrice16x8 = "‚ñë LED Eyes";
Blockly.Msg.CAT_DFRobot_SHIELD_LCDKEYPAD = "‚ñÄ LCD Screen";
Blockly.Msg.CAT_iot = "‚òÅ IoT";
Blockly.Msg.CAT_html = "‚úâ HTML";
Blockly.Msg.CAT_DFPLAYER = "‚ô´ Audio";
Blockly.Msg.CAT_OTTO = "‚äü Otto";
Blockly.Msg.CAT_OTTOH = "‚äü Humanoide";
Blockly.Msg.CAT_OLED_U8G = "‚ñÄ OLED";
Blockly.Msg.CAT_NEOPIXEL = "‚òÑ Neopixel";
//Wireless
Blockly.Msg.esp8266_init_tooltip = "Inicializa√ß√£o do m√≥dulo wifi e conex√£o com o indicador de par√¢metros";
Blockly.Msg.esp8266_1 = "Esp 8266";
Blockly.Msg.esp8266_2 = "SSID";
Blockly.Msg.esp8266_3 = "key";
Blockly.Msg.esp8266_4 = "IP";
Blockly.Msg.esp8266_5 = "gateway";
Blockly.Msg.esp8266_6 = "mask";
Blockly.Msg.esp8266_7 = [["client", "client"], ["server", "server"]];
Blockly.Msg.esp8266_8 = "port";
Blockly.Msg.esp8266_9 = [["dynamic", "dynamic"], ["static", "static"]];
Blockly.Msg.esp8266_10 = "address";
Blockly.Msg.esp8266_recept_tooltip = "reception";
Blockly.Msg.esp8266_url = "https://github.com/OttoDIY/esp";
Blockly.Msg.esp8266_html_tooltip = "";
Blockly.Msg.esp8266_send_html_tooltip = "";
Blockly.Msg.esp8266_send_html = "enviar p√°gina HTML";
Blockly.Msg.esp8266_start_tooltip = "";
Blockly.Msg.esp8266_start = "iniciar servidor";
Blockly.Msg.esp8266_request_tooltip = "";
Blockly.Msg.esp8266_request = "se na consulta contiver";
Blockly.Msg.esp8266_request_container = "n√≥s encontramos";
//INTERRUPTION
Blockly.Msg.LKL_ATTACHINTERRUPT_PIN = 'Interromper: quando um ';
Blockly.Msg.LKL_DETACHINTERRUPT_PIN = "desabilitar interromper no pin";
Blockly.Msg.LKL_TOOLTIP_INOUT_ATTACHINTERRUPT = "Especificiar uma a√ß√£o a ser tomada quando for interrompido externamente (4 poss√≠veis modos) ocorre no pino 2 ou 3";
Blockly.Msg.LKL_TOOLTIP_INOUT_DETACHINTERRUPT = "Desabilitar o interruptor externo anterior";
Blockly.Msg.LKL_MODE = '√© detectado no pin';
// FIELDDROPDOWN
Blockly.Msg.note = [[ "DO \u2083", "261"], [ "RE \u2083", "293"], [ "MI \u2083", "329"], [ "FA \u2083", "349"], [ "SOL \u2083", "392"], [ "LA \u2083", "440"], [ "SI \u2083", "493"], [ "DO \u2084", "523 "], [" RE \u2084 "," 587 "], [" MI \u2084 "," 659 "], [" FA \u2084 "," 698 "], [" SOL \u2084 "," 784 "], [ "LA \u2084", "880"]];
Blockly.Msg.tempo = [["\u266B", "125"], ["\u266A", "250"], ["\u2669", "500"],["ùÖóùÖ•", "1000"], ["ùÖù", "2000"]];
Blockly.Msg.on_off = [["on", "LOW"], ["off", "HIGH"]];
Blockly.Msg.menublink = [["slowly", "1000"], ["fast", "100"]];
Blockly.Msg.AV_AR = [[Blockly.Msg.AV, "FORWARD"], [Blockly.Msg.AR, "BACKWARD"]]; // do not translate
Blockly.Msg.times = [["segundos", "s"], ["millisegundos", "m"], ["microsegundos", "u"]];
Blockly.Msg.time = [["segundos", "s"], ["millisegundos", "m"]];
Blockly.Msg.char_lcd = [[ "# 1", "1"], [ "# 2", "2"], [ "3", "3"], [ "# 4", "4"], [ "# 5", "5"], [ "# 6", "6"], [ "No. 7", "7"], [ "# 8", "8 "]];
Blockly.Msg.rxtx = [[ "2", "2"], [ "3", "3"], [ "4", "4"], [ "5", "5"], [ "6 "," 6 "], [" 7 "," 7 "], [" 8 "," 8 "], [" 9 "," 9 "], [" 10 "," 10 "], [" 11 "," 11 "], [" 12 "," 12 "], [" 13 "," 13 "]];
Blockly.Msg.FIELDDROPDOWN = [["1(high state)", Blockly.Msg.high], ["0(low state)", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_0_1 = [["UP", Blockly.Msg.high], ["DOWN", Blockly.Msg.low]];
Blockly.Msg.ligne = [["1", "0"], ["2", "1"]];
Blockly.Msg.colonne = [[ "1", "0"], [ "2", "1"], [ "3", "2"], [ "4", "3"], [ "5 "," 4 "], [" 6 "," 5 "], [" 7 "," 6 "], [" 8 "," 7 "], [" 9 "," 8 "], [" 10 "," 9 "], [" 11 "," 10 "], [" 12 "," 11 "], [" 13 "," 12 "], [" 14 "," 13 "], [" 15 "," 14 "], [" 16 "," 15 "]];
Blockly.Msg.FIELDDROPDOWN_ONOFF = [["ligar", Blockly.Msg.high], ["desligar", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_ONOFF_matrice = [["1", "true"], ["0", "false"]];
Blockly.Msg.FIELDDROPDOWN_av_ar = [[Blockly.Msg.AV, Blockly.Msg.high], [Blockly.Msg.AR, Blockly.Msg.low]];
Blockly.Msg.LKL_DROPDOWN = [['borda ascendente', 'RISING'], ['borda de queda', 'FALLING'], ['estado de mudan√ßa', 'CHANGE'], ['low state', Blockly. Msg.low]];
Blockly.Msg.irq = [['borda ascendente', 'Pin.IRQ_RISING'], ['borda de queda', 'Pin.IRQ_FALLING'], ['high state', 'Pin.IRQ_HIGH_LEVEL'], ["low state "," Pin.IRQ_LOW_LEVEL "]];
Blockly.Msg.menudht = [["umidade", "h"], ["temperatura", "t"]];
Blockly.Msg.couleur = [["azul", "blue"], ["amarelo", "yellow"], ["vermelho", "red"], ["verde", "green"]];
Blockly.Msg.sens = [["frente", "a"], ["vire a direita", "d"], ["vire a esquerda", "g"]];
//sensor
Blockly.Msg.VL53L0X="Sensor de dist√¢ncia laser";
Blockly.Msg.VL53L0X_tooltip="inicializar sensor.\nSensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.VL53L0X_distance="dist√¢ncia medida pelo laser";
Blockly.Msg.VL53L0X_distance_tooltip="VL530X :\nretornar dist√¢ncia medida pelo laser em mm";
Blockly.Msg.bme280="Sensor de press√£o atmosf√©rica";
Blockly.Msg.bme280_tooltip="inicializar sensor.\nSensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.bme280_pressure="press√£o atmosf√©rica";
Blockly.Msg.bme280_pressure_tooltip="BME280 :\nretornar press√£o atmosf√©rica em hPa";
Blockly.Msg.inter="switch is";
Blockly.Msg.inter_tooltip="retorna true (false) se a sele√ß√£o √© (n√£o √©) na posi√ß√£o indicada";
Blockly.Msg.mc005="presen√ßa detectada no pin";
Blockly.Msg.mc005_tooltip="MC005:\nretorna true (false) se a presen√ßa √© (n√£o √©) detectada";
Blockly.Msg.bp = "bot√£o pressionado no pin";
Blockly.Msg.bp_tooltip = "retorna true (false) se um bot√£o √© (n√£o √©) pressionado";
Blockly.Msg.dht11_tooltip="DHT11 :\nretorna a umidade do ar (de 20 at√© 80%) ou \n a temperatura (de 2 at√© 50ÔøΩC)";
Blockly.Msg.dht22_tooltip = "DHT22: \nretorna a umidade do ar (de 0 at√© 100%) ou \n a temperatura (de -40 at√© 80 ÔøΩ C)";
Blockly.Msg.suiveur_ligne = "linha preta detectada no pin";
Blockly.Msg.suiveur_ligne_tooltip = "CAP227: \nreturns true (false) if a black line is (is not) detected";
Blockly.Msg.light = "brilho no0 pin";
Blockly.Msg.light_tooltip = "retorna o valor dependendo do brilho \n0: escuro \n255: claro";
Blockly.Msg.hum = "umidade do solo no pin";
Blockly.Msg.hum_tooltip = "CAP 615: \nretorna umidade do solo de 0 at√© 100%";
Blockly.Msg.light_tooltip = "retorna o valor dependendo do brilho \n0: escuro \n255: claro";
Blockly.Msg.grove_ldr = "brilho no pin";
Blockly.Msg.grove_ldr_tooltip = "retorna a medida de brilho \n0: sem brilho \n100: brilho intenso";
Blockly.Msg.potar = "posi√ß√£o do cursor no pin";
Blockly.Msg.potar_tooltip = "retorna o valor baseado na posi√ß√£o do cursor \n0: cursor esquerdo \n255: cursor direito";
Blockly.Msg.lm35 = "temperatura no pin";
Blockly.Msg.lm35_tooltip = "LM35: \nretorna a medida de temperatura em graus celcius (de 0 at√© 80 ÔøΩ)";
Blockly.Msg.ultrason_1 = "distancia < limite";
Blockly.Msg.ultrason_2 = "retorna um estado Alto se a medida de dist√¢ncia for menor do que o limite";
Blockly.Msg.ultrason_distance1 = "dist√¢ncia medida por ultrasom";
Blockly.Msg.ultrason_tooltip = "HC-SR04: \nSensor de som capaz de medir dist√¢ncia (de 3 cm e 4 m) \nindicando os pins do Arduino para ser conectado TRIG e ECHO";
Blockly.Msg.ultrason = "ultrasom pins";
Blockly.Msg.ultrason_distance2 = "HC-SR04: \nretorna a dist√¢ncia medida em cm pelo detector ultrasom";
Blockly.Msg.ultrason_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pir = "movimento detectado ";
Blockly.Msg.feu = "fogo detectado ";
Blockly.Msg.presence = "obst√°culo detectado ";
Blockly.Msg.appui = "touch ";
Blockly.Msg.pir_tooltip = "HC-SR501: \nretorna true (false) se a presen√ßa √© (n√£o √©) detectada";
Blockly.Msg.feu_tooltip = "CAP168: \nretorna true (false) se fogo for (n√£o for) detectado";
Blockly.Msg.presence_tooltip = "CAP711: \nretorna true (false) se um contato teve (n√£o teve) tomado lugar";
Blockly.Msg.appui_tooltip = "CAP831: \nretorna true (false) se um suporte √© (n√£o √©) detectado";
// bluetooth
Blockly.Msg.bluetooth1 = "se os dados recebidos por bluetooth";
Blockly.Msg.bluetooth1_tooltip = "recep√ß√£o de dados por bluetooth\nconectando m√≥dulo HC-06 para pins 0 e 1 \net cross Rx e Tx pins";
Blockly.Msg.bluetooth2 = "send by bluetooth";
Blockly.Msg.bluetooth2_tooltip = "envia dados via bluetooth \nconectando m√≥dulo HC-06 para pins 0 e 1 \net cross pins Rx e Tx";
Blockly.Msg.bluetooth_init_tooltip = "";
Blockly.Msg.bluetooth_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy-plus"; // do not translate
//LCD screen
Blockly.Msg.lcd_fond = "bottom";
Blockly.Msg.LCD = "LCD screen";
Blockly.Msg.LCDi2c_tooltip = "initializes the 2-line, 16-character I2C LCD with RGB backlight. \n Displayer <-> Arduino \nSDA <--------> A4 \nSCL <- -------> A5 ";
Blockly.Msg.LCD_tooltip = "initializes the LCD, 2 lines and 16 characters, indicating the pins to connect";
Blockly.Msg.LCD_SHIELD_PRINT_HELPURL = "https://www.arduino.cc/en/Tutorial/HelloWorld";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT = "show on LCD";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT_tooltip = "display the text in the specified location";
Blockly.Msg.LCD_SHIELD_PRINT_TOOLTIP = "write the text (s) on the LCD screen";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT1 = "line 1";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT2 = "line 2";
Blockly.Msg.LCD_line = "line";
Blockly.Msg.LCD_col = "column";
Blockly.Msg.LCD_raz = "erase the LCD screen";
Blockly.Msg.LCD_raz_tooltip = "clear screen";
Blockly.Msg.lcd_aff_symbole = "display the symbol";
Blockly.Msg.lcd_aff_symbole_tooltip = "show the symbol that has been defined before";
Blockly.Msg.lcd_symbole = "define the symbol";
Blockly.Msg.lcd_symbole_tooltip = "definition of a character for the LCD: \n 0 turns off a pixel \n 1 lights a pixel";
// structure
Blockly.Msg.loop = "‚àû La√ßo";
Blockly.Msg.init = "‚öôÔ∏è Configura√ß√£o";
Blockly.Msg.base_setup_loop = "A fun√ß√£o de inicializa√ß√£o: \nIsso √© usado para incializar as variaveis,a dire√ß√£o dos pins ... \nIsso √© executado uma vez \nO la√ßo da fun√ß√£o: \nEsta √© parte principal do programa, todos os blocos colocados aqui no la√ßo ir√£o rodar indefinidamente (v√°rias vezes por segundo) ";
Blockly.Msg.loop_tooltip = "todos os blocos colocados aqui no la√ßo ir√£o rodar indefinidamente (v√°rias vezes por segundo)";
Blockly.Msg.begin_tooltip = "esse bloco √© usado para definir a ordem em que o programa pode ser executado";
Blockly.Msg.begin = "üèÅ INICIO";
Blockly.Msg.def = "‚öôÔ∏è Declara√ß√£o";
Blockly.Msg.def_tooltip = "todos os blocos colocados aqui ser√£o executados uma √∫nica vez, aqui √© onde diferentes sensores e autuadores s√£o configurados";
Blockly.Msg.END = "üèÅ FIM";
Blockly.Msg.END_tooltip = "Pare o programa, blocos colocados depois ser√£o ignorados";
Blockly.Msg.code_tooltip = "Digite aqui uma instru√ß√£o que n√£o esteja em blocos";
//matrix
Blockly.Msg.matriceLC = "coloca o LED, linha";
Blockly.Msg.matrice_create_aff = "Cria o bloco 'display symbol %1'";
Blockly.Msg.matrice_create_symbole = "Cria o bloco 'set the symbol %1'";
Blockly.Msg.matrice = "matrix";
Blockly.Msg.matrice8x8_tooltip = "Inicializa√ß√£o da matriz de 64 LEDs, √© necess√°rio indicar os pins do arduino para o qual ser√° conectado DIN, CLK, CS";
Blockly.Msg.matrice8x8_symbole = "define o simbolo";
Blockly.Msg.matrice8x8_symbole_tooltip = "defini√ß√£o de simbolo para a matriz: \n 0 desliga um LED \n 1 liga um LED";
Blockly.Msg.matrice8x8_efface = "limpar a matriz";
Blockly.Msg.matrice8x8_aff = "mostrar o simbolo";
Blockly.Msg.matrice8x8_binaire_tooltip = "1 ligar um LED da matriz e 0 desliga-lo";
Blockly.Msg.matrice8x8_del_tooltip = "Ligar (desligar) um LED nas coordenadas indicadas do array \nAten√ß√£o, array inicia em 0";
Blockly.Msg.matrice8x8_aff_tooltip = "Mostrar o simbolo anterior definido";
Blockly.Msg.matrice8x8_efface_tooltip = "Desligar todos os LEDs na matriz";
Blockly.Msg.matrice8x8_helpurl = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.matrice16x8_tooltip = "Inicializa√ß√£o do array para 128 LEDs. \nMatriz <-> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.matrice16x8_symbole = "defini√ß√£o do simbolo";
Blockly.Msg.matrice16x8_symbole_tooltip = "defini√ß√£o do simbolo para a matriz: \n 0 desligar um LED \n 1 ligar um LED";
Blockly.Msg.matrice16x8_efface = "desligar um LEDs da matriz";
Blockly.Msg.matrice16x8_aff = "mostrar o simbolo";
Blockly.Msg.matrice16x8_binaire_tooltip = "1 liga um LED da matriz e 0 desliga ele";
Blockly.Msg.matrice16x8_del_tooltip = "Liga (desliga) um LED na indica√ß√£o das coordenadas da matriz \nAten√ß√£o inicia em 0";
Blockly.Msg.matrice16x8_aff_tooltip = "Mostrar o simbolo anterior definido";
Blockly.Msg.matrice16x8_efface_tooltip = "Desligar todos os LEDs na matriz";
Blockly.Msg.matrice16x8_helpurl = "";
//time
Blockly.Msg.millis ="tempo decorrido em";
Blockly.Msg.millis_start="iniciar uma cronometragem em";
Blockly.Msg.millis_tooltip="";
Blockly.Msg.millis_start_tooltip="";
Blockly.Msg.ARDUINO_INOUT_Pulsein = "retorna a dura√ß√£o em microsegundos de UP ou DOWN de pulso aplicado ao pin.Se o valor do par√¢metro for HIGH, o bloco esperando pelo pin para ir para HIGH, come√ßa ent√£o o tempo, espera pelo pin para voltar para LOW level e ent√£o para o tempo ";
Blockly.Msg.ARDUINO_BASE_DELAY = "‚è≤ wait";
Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP = "Especificar o tempo de espera em segundos, millisegundos ou microsegundos. \nO programa n√£o far√° nada enquanto isso";
Blockly.Msg.millis1 = "dura√ß√£o em";
Blockly.Msg.millis2 = "do inicio";
Blockly.Msg.ARDUINO_SINCE_PROGRAM_STARTED_TOOLTIP = "retorna a dura√ß√£o em milisegundos, segundos ou microsegundos desde o inicio do programa";
Blockly.Msg.ARDUINO_PULSEIN = "dura√ß√£o do estado";
Blockly.Msg.tempo_helpurl = "https://www.arduino.cc/en/tutorial/blink";
Blockly.Msg.tempo_tooltip = "Esse bloco checa se o tempo indicado j√° terminou, se for o caso ent√£o executa o bloco colocado dentro .. Ao contr√°rio do bloco 'para esperar' este n√£o bloqueia." ;
Blockly.Msg.tempo1 = "all";
//OLED
Blockly.Msg.lp2i_u8g_draw_string = "OLED I2C display";
Blockly.Msg.lp2i_u8g_draw_string_Text = "texto para mostrar =";
Blockly.Msg.lp2i_u8g_draw_string_X = "raw x (127 max) =";
Blockly.Msg.lp2i_u8g_draw_string_Y = "linha y (63 max) =";
Blockly.Msg.lp2i_u8g_draw_4strings = "OLED I2C display";
Blockly.Msg.lp2i_u8g_draw_4strings_texts_to_display = "texto para mostrar :";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line1 = "linha 1 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line2 = "linha 2 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line3 = "linha 3 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line4 = "linha 4 =";
Blockly.Msg.lp2i_u8g_print = "OLED I2C display";
Blockly.Msg.lp2i_u8g_print_N = "N√∫mero para mostrar ="
Blockly.Msg.lp2i_u8g_print_X = "raw x (127 max) =";
Blockly.Msg.lp2i_u8g_print_Y = "linha y (63 max) =";
Blockly.Msg.lp2i_u8g_4draw_print = "OLED I2C display";
Blockly.Msg.lp2i_u8g_4draw_print_to_display = "para mostrar :";
Blockly.Msg.lp2i_u8g_4draw_print_Text_line1 = "linha 1 =";
Blockly.Msg.lp2i_u8g_4draw_print_N1 = "N√∫mero 1 (ao final) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line2 = "linha 2 =";
Blockly.Msg.lp2i_u8g_4draw_print_N2 = "N√∫mero 2 (ao final) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line3 = "linha 3 =";
Blockly.Msg.lp2i_u8g_4draw_print_N3 = "N√∫mero 3 (ao final) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line4 = "linha 4 =";
Blockly.Msg.lp2i_u8g_4draw_print_N4 = "N√∫mero 4 (ao final) ="
// LED
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT = "o LED na placa";
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP = "Liga ou desligar o LED na placa do Arduino";
Blockly.Msg.blink = "piscar o LED na placa";
Blockly.Msg.blink_tooltip = "O LED da placa flash de 1 ou 10 vezes por segundo";
Blockly.Msg.del = "o LED no pin";
Blockly.Msg.del_tooltip = "ligar (desligar) o LED conectado ao pin indicado";
Blockly.Msg.bargraphe = "bargraph";
Blockly.Msg.bargraphe_allume="ligar LEDs para";
Blockly.Msg.bargraphe_allume_tooltip="0 n√£o ascendo os LEDs \n2,5 ascende os 2 primeiros LEDs e o 3¬∫ meio aceso \n10 ascende todos os LEDs";
Blockly.Msg.bargraphe_tooltip = "modulo gr√°fico de barra √© composto por 10 LEDs (8 verde, 1 amarelo e 1 vermelho), √© necess√°rio indicar os pins do arduino nos quais ser√£o conectados o DCKI e DI";
Blockly.Msg.rvb_init="LED RGB";
Blockly.Msg.rvb_init_tooltip="indique os PWM pins para conectar ao RGB LED";
Blockly.Msg.rvb_set="mostrar cores";
Blockly.Msg.rvb_set_tooltip="exibir uma cor indicando um valor para os 3 componentes (vermelho, verde, azul)";
Blockly.Msg.pixel1 = "RGB NeoPixel";
Blockly.Msg.pixel2 = "atualizar pixels";
Blockly.Msg.pixel3 = "com a cor";
Blockly.Msg.pixel4 = "n√∫mero";
Blockly.Msg.pixel5 = "alterar o brilho do pixel para";
Blockly.Msg.pixel6 = "alterar o pixel";
Blockly.Msg.pixel1_tooltip="neopixel RGB m√≥dulo indicando o pin para conectar e o n√∫mero de pixels";
Blockly.Msg.pixel2_tooltip="mostrar modifica√ß√µes feitas";
Blockly.Msg.pixel5_tooltip="adjustar brilho do pixel (de 0 at√© 255)";
Blockly.Msg.pixel3_tooltip="escolha o pixel para ascender e a sua cor \ nCuidado a numera√ß√£o incia em 0";
// output
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1 = "colocar o DIGITAL pin";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP = "escreva 0 ou 1 estado l√≥gico para uma sa√≠da espec√≠fica";
Blockly.Msg.toggle = "alternar o estado do pin";
Blockly.Msg.toggle_tooltip = "Alternar: \n escreva o estado l√≥gico 0 se antes houver um estado 1 (e vice versa) na sa√≠da espec√≠ficada";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1 = "colocar o PWM pin";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP = "enviar um valor entre 0 e 255 em um sa√≠da espec√≠fica";
// input
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT = "estado DIGITAL do pin";
Blockly.Msg.in_pullup = "Pull-Up";
Blockly.Msg.in_pullup_tooltip = "retorna o estado l√≥gico (0 ou 1) do pin indicado \nretorna 1 (alto) por padr√£o se pull-up estiver habilitado";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP = "l√™ um estado l√≥gico 0 ou 1 de um pin digital";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT = "valor ANALOG do pin";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP = "retorna um valor entre 0 e 1023";
// audio
Blockly.Msg.play = "tocar";
Blockly.Msg.play_tooltip = "tocar a nota";
Blockly.Msg.play_helpurl = "";
Blockly.Msg.beep = "bip no pin";
Blockly.Msg.beep_TOOLTIP = "bips (a 440Hz cada 1s) no pin selecionado";
Blockly.Msg.ARDUINO_TONE_INPUT1 = "emite um som no pin";
Blockly.Msg.ARDUINO_TONE_INPUT2 = "frequ√™ncia (Hz)";
Blockly.Msg.ARDUINO_TONE_INPUT3 = "dura√ß√£o (ms)";
Blockly.Msg.ARDUINO_TONE_TOOLTIP = "emita um som no pin selecionado, na frequ√™ncia desejada e para a dura√ß√£o desejada";
Blockly.Msg.ARDUINO_NOTONE_INPUT = "pare o som no pin";
Blockly.Msg.ARDUINO_NOTONE_TOOLTIP = "pare o som no pin selecionado";
Blockly.Msg.lp2i_mp3_helpurl = "https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299";
Blockly.Msg.lp2i_mp3_Volume = "volume [0-48]";
Blockly.Msg.lp2i_mp3_autoplay = "AutoPlay";
Blockly.Msg.lp2i_mp3 = "MP3 player";
Blockly.Msg.lp2i_mp3_tooltip = "DFPlayer Mini mp3: \ninicializa√ß√£o do m√≥dulo, volume e opera√ß√£o modo \nModule MP3 <-> Arduino \nRx (2) <------------- -> Tx (1) ";
Blockly.Msg.lp2i_mp3_play = "tocar o arquivo mp3";
Blockly.Msg.lp2i_mp3_play_track_tooltip = "tocar o som espec√≠fico";
Blockly.Msg.lp2i_mp3_play_tooltip = "tocar o som atual";
Blockly.Msg.lp2i_mp3_pause = "pausar o arquivo mp3";
Blockly.Msg.lp2i_mp3_pause_tooltip = "pare o som atual";
Blockly.Msg.lp2i_mp3_prev = "ler o arquivo mp3 anterior";
Blockly.Msg.lp2i_mp3_prev_tooltip = "tocar a faixa anterior";
Blockly.Msg.lp2i_mp3_vol = "mudar o volume para";
Blockly.Msg.lp2i_mp3_vol_tooltip = "mudar o volume para o valor espec√≠fico [0-48]";
Blockly.Msg.lp2i_mp3_next = "ler o seguinte arquivo mp3";
Blockly.Msg.lp2i_mp3_next_tooltip = "tocar o pr√≥ximo som";
// servomotor
Blockly.Msg.ARDUINO_SERVO_MOVE_INPUT1 = "rotecionar para";
Blockly.Msg.ARDUINO_SERVO_MOVE_DEGREE = "√¢ngulo [0¬∞-180¬∞]";
Blockly.Msg.ARDUINO_SERVO_MOVE_TOOLTIP = "poss√≠vel rota√ß√£o entre 0 e 180 graus";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TEXT = "girar";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TOOLTIP = "Girar o servio conectado ao pin espec√≠fico, na velocidade indicada e na dire√ß√£o selecionada";
//engine
Blockly.Msg.mot_tooltip = "Placa do motor controlador L293D: \n ativa ambos os motores (M1 and M2) para avan√ßar ou virar, a velocidade pode ser colocada entre 0 e 90";
Blockly.Msg.mot_stop = "pare";
Blockly.Msg.mot_stop_tooltip = "L293D Placa do motor controlador: \npara os dois motores (M1 and M2)";
Blockly.Msg.moteur = "ativar motor";
Blockly.Msg.moteurstop = "parar motor";
Blockly.Msg.moteur_tooltip = "iniciar o DC motor conectado ao pin especificado, na velocidade indicada \nvelocidade = 0 -> motor para";
Blockly.Msg.moteurdagu_tooltiprs040 = "placa RS 040: \n ativar uma de 2 sa√≠das para o drive DC motors, a velocidade pode ser ajustada entre 0 e 90";
Blockly.Msg.moteurdagu_tooltiprs040stop = "placa RS 040: \npara um dos 2 motores";
Blockly.Msg.moteurdagu_tooltiprs027 = "placa RS 027: \n operar uma de 2 sa√≠das para drive DC motors, a velocidade pode ser ajustada entre 0 e 90";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR1 = "v1 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR2 = "v2 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_DIRECTION = "dire√ß√£o";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_VITESSE = Blockly.Msg.vitesse+"[0-255]";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_AVANT = "pra frente";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_ARRIERE = "pra tr√°s";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_STOP = "pare";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP1 = "v1 - Motor de passo";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP2 = "v2 - Motor de passo";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_CONNECT = "pin";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_PPT = "not per turn";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_RPM = "velocidade (RPM)";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_NB_PAS = "n√∫mero de passos";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC1 = "DC 1 engine";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC2 = "DC 2 engine";
Blockly.Msg.m_pap="motor passo-por-passo";
Blockly.Msg.m_pap_step="passo";
Blockly.Msg.m_pap_step1="mover para frente";
Blockly.Msg.m_pap_tooltip = "Inicializa√ß√£o de um motor de passo. \nInidicando o n√∫mero de passos, velocidade em rpm e pins para conectar";
Blockly.Msg.m_pap_step_tooltip = "ativar o motor de passo com o n√∫mero de passos indicados, as instru√ß√µes seguintes s√≥ poder√£o ser executados uma vez por rota√ß√£o concluida do motor";
// serial
Blockly.Msg.Serial_Init = "porta serial ligada";
Blockly.Msg.Serial_Init_tooltip = "Define a taxa de comunica√ß√£o em caracteres por segundo para comunica√ß√£o serial";
Blockly.Msg.Serial_Write = "enviar para a porta serial";
Blockly.Msg.Serial_write_tooltip = "Enviar dados para a porta serial";
Blockly.Msg.Serial_read = "leitura de dados na porta serial";
Blockly.Msg.Serial_read_tooltip = "retorna o primeiro byte de dados dispon√≠vel na porta serial, ou -1 se nenhum dado estiver dispon√≠vel";
Blockly.Msg.Serial_available = "grande quantidade de dados na porta serial";
Blockly.Msg.Serial_available_tooltip = "retorna o n√∫mero de bytes dispon√≠veis na fila da porta serial ou 0 se nada estiver dispon√≠vel";
Blockly.Msg.Serial_saut = "uma quebra de linha";
Blockly.Msg.Serial_saut_tooltip = "retorna uma quebra de linha no monitor serial";
Blockly.Msg.Serial_space = "um separador";
Blockly.Msg.Serial_space_tooltip = "retorna um espa√ßo no monitor serial";
Blockly.Msg.repl_read = "comando inserido pelo usu√°rio";
// software serial
Blockly.Msg.SSERIAL_Init = "porta de software na Rx";
Blockly.Msg.SSERIAL_tooltip = "Criando nova porta de comunica√ß√£o usando os pins especificos e velocidade";
Blockly.Msg.SSERIAL_Read = "dados lidos na porta de software";
Blockly.Msg.SSERIAL_Read_tooltip = "retorna o primeiro byte de dados recebidos dispon√≠veis na porta de software ou -1 se nenhum dado estiver dispon√≠vel";
Blockly.Msg.SSERIAL_Write = "enviar para a porta de software";
Blockly.Msg.SSERIAL_Write_tooltip = "Enviar dados para a porta de software";
Blockly.Msg.SSERIAL_Read_tooltip = "retorna o primeiro byte de dados recebidos dispon√≠veis na porta de software ou -1 se nenhum dado estiver dispon√≠vel";
Blockly.Msg.SSERIAL_Available = "quantidade de dados na porta de software";
Blockly.Msg.SSERIAL_Available_tooltip = "retorna o n√∫mero de bytes dispon√≠veis na fila da porta de software, ou 0 se nenhum estiver dispon√≠vel";
////////////////////////////OTTO DIY Robot/////////////////////
Blockly.Msg.OTTO9_HOME_TEXT = "Inicial";
Blockly.Msg.OTTO9_HOME_TOOLTIP = "Otto vai para a posi√ß√£o inicial direita";
Blockly.Msg.OTTO9_DIY_URL = "https://wikifactory.com/+OttoDIY/otto-diy";
Blockly.Msg.OTTO9_HUMANOID_URL = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.OTTO9_CALIBRATION='calibrar ';
Blockly.Msg.OTTO9_CALIBRATION_LEG='perna ';
Blockly.Msg.OTTO9_CALIBRATION_FOOT='p√© ';
Blockly.Msg.OTTO9_CALIBRATION_ARM='bra√ßo ';
Blockly.Msg.OTTO9_CALIBRATION_TOOLTIP='use pequenos valores positivos e negativos interativamente, mude gradualmente at√© ficar completamente reto (90¬∫)';
Blockly.Msg.OTTO9_EEPROM_TEXT= 'salvar Trims no EEPROM';
Blockly.Msg.OTTO9_EEPROM_TOOLTIP= 'Use somente depois de uma vez completamente reto (90¬∫) uma vez; apague este BLOCO depois para programa√ß√£o adicional';
Blockly.Msg.OTTO9_MOVE_TEXT = "mover";
Blockly.Msg.OTTO9_MOVE_TOOLTIP = "Otto movimentos basicos";
Blockly.Msg.OTTO9_MOVE_CHOICE = [["‚Üë pra frente", "FORWARD"], ["‚Üì pra tr√°s", "BACKWARD"], ["‚Ü∫ virar a esquerda", "LEFT"], ["‚Üª virar a direita", "RIGHT"], ["dobrar a esquerda", "BENDLEFT"], ["dobrar a direita", "BENDRIGHT"], ["agitar a perna esquerda", "SHAKELEFT"], ["agitar a perna direita", "SHAKERIGHT"], ["pra cima", "jump"]];
Blockly.Msg.OTTO9_MOVEW_CHOICE = [["‚Üë pra frente", "FORWARD"], ["‚Üì pra tr√°s", "BACKWARD"], ["‚Ü∫ virar a esquerda", "LEFT"], ["‚Üª virar a direita", "RIGHT"]];
Blockly.Msg.OTTO9_MOVE_SPEED_TEXT = "velocidade";
Blockly.Msg.OTTO9_MOVE_SPEED_CHOICE = [["normal", "1000"],["lento", "2000"],["muito lento", "3000"] , ["r√°pido", "750"], ["muito r√°pido", "500"], ["muito mais r√°pido", "250"]];
Blockly.Msg.OTTO9_MOVEW_SPEED_CHOICE = [["normal", "45"],["lento", "20"],["muito lento", "10"] , ["r√°pido", "60"], ["muito r√°pido", "90"]];
Blockly.Msg.OTTO9_DANCE_TEXT = "dan√ßar";
Blockly.Msg.OTTO9_DANCE_TOOLTIP = "Otto dance!";
Blockly.Msg.OTTO9_DANCE_CHOICE = [["moonwalk ‚üµ", "moonwalkerLEFT"],  ["moonwalk ‚ü∂", "moonwalkerRIGHT"],["cruzando ‚üµ", "crusaitoLEFT"],["cruzando ‚ü∂", "crusaitoRIGHT"], ["agitando ‚Üë", "flappingFRONT"], ["agitando ‚Üì", "flappingBACK"]];
Blockly.Msg.OTTO9_DANCE_SIZE_TEXT = "tamanho";
Blockly.Msg.OTTO9_DANCE_SIZE_CHOICE = [["normal", "25"], ["pequeno", "10"], ["grande", "40"]];
Blockly.Msg.OTTO9_DO_TEXT = "fa√ßa";
Blockly.Msg.OTTO9_DO_TOOLTIP = "Otto movimentos completos";
Blockly.Msg.OTTO9_DO_CHOICE = [ ["swing", "swing"], ["updown", "updown"], ["tiptoeSwing", "tiptoeSwing"], ["jitter", "jitter"], ["ascendingTurn", "ascendingTurn"]];
Blockly.Msg.OTTO9_GESTURE_TEXT = "gesto";
Blockly.Msg.OTTO9_GESTURE_TOOLTIP = "Sons emocionais combinados com movimentos";
Blockly.Msg.OTTO9_GESTURE_CHOICE = [["üòÉ feliz1", "OttoSuperHappy"],["üôÇ feliz2", "OttoHappy"], ["üôÅ triste", "OttoSad"], ["üò¥ dormir", "OttoSleeping"], ["üòï confuso", "OttoConfused"], ["üò∞ irr√≠tado", "OttoFretful"], ["üòç amor", "OttoLove"], ["üò° bravo", "OttoAngry"], ["ü§© magia", "OttoMagic"], ["üòê onda", "OttoWave"], [" üòé vit√≥ia", "OttoVictory"], ["üòû falha", "OttoFail"], ["üí© peido", "OttoFart"]];
Blockly.Msg.OTTO9_SOUND_TEXT = "som";
Blockly.Msg.OTTO9_SOUND_TOOLTIP = "Sons emocionais";
Blockly.Msg.OTTO9_SOUND_CHOICE = [ ["üòÉ feliz1", "S_superHappy"], ["üôÇ feliz2", "S_happy"], ["üòä feliz3", "S_happy_short"], ["üôÅ triste", "S_sad"], ["üòï confuso", "S_confused"], ["ü§ó fofo", "S_cuddly"], ["üòÆ Oh", "S_OhOoh"], ["üòØ OhOoh", "S_OhOoh2"], ["üò≤ surpresa", "S_surprise"],["ü§ñ conectar", "S_connection"], [" ü§ñ desconectar", "S_disconnection"], ["üëá empurrar", "S_buttonPushed"], ["‚ùó 1", "S_mode1"], ["‚ùó‚ùó 2", "S_mode2"], ["‚ùó‚ùó‚ùó 3", "S_mode3"], ["üí§ dormir", "S_sleeping"], ["üí© peido1", "S_fart1"], ["üí© peido2", "S_fart2"], ["üí© peido3", "S_fart3"],];
Blockly.Msg.OTTO9_GETDISTANCE_TEXT = "dist√¢ncia [cm]";
Blockly.Msg.OTTO9_GETDISTANCE_TOOLTIP = "Dist√¢ncia entre 2cm e 400cm";
Blockly.Msg.OTTO9_GETOBSTACLE_TEXT = "obst√°culo";
Blockly.Msg.OTTO9_OBSTACLE_CHOICE = [["perto", "10"],["muito perto", "3"],["longe", "30"]];
Blockly.Msg.OTTO9_GETNOISE_TEXT = "ru√≠do medido";
Blockly.Msg.OTTO9_GETNOISE_TOOLTIP = "100 √© quieto, 500 de barulho e mais do que 1000 √© alto, tamb√©m ajusta o sensor de trimpot";
Blockly.Msg.OTTO9_GETTOUCH_TEXT = "toque";
Blockly.Msg.OTTO9_GETTOUCH_TOOLTIP = "use se condicional";
Blockly.Msg.OTTO9_GETG_TEXT = "movimento";
Blockly.Msg.OTTO9_MOUTH_TEXT = "boca";
Blockly.Msg.OTTO9_MOUTH_TOOLTIP = "emo√ß√£o na boca para matiz de 8x8 LED #0-30";
Blockly.Msg.OTTO9_MOUTH_CHOICE = [["üòÉ feliz1", "happyOpen"],["üôÇ feliz2", "happyClosed"], ["üòä sorriso", "smile"], ["üò¶ triste1", "23"], ["üôÅ triste2", "24"], ["üòÆ surpreso", "smallSurprise"], ["üò≤ Surpreso2", "bigSurprise"], ["üòï confuso", "confused"],["üòõ l√≠ngua", "tongueOut"],["üôÉ boba", "culito"],  ["üòë s√©rio", "lineMouth"], ["üôÑ chateado", "21"], ["üíñ cora√ß√£o", "heart"], ["ü¶á v1", "vamp1"], ["ü¶á v2", "vamp2"], ["‚ùå no", "xMouth"], ["‚úÖ OK", "okMouth"],["‚ùì?", "27"], ["‚ö° trov√£o", "thunder"]];
Blockly.Msg.OTTO9_EYES_TEXT = "olhos";
Blockly.Msg.OTTO9_EYES_TOOLTIP = "emo√ß√£o nos olhos para matriz de 16x8 i2C LED ";
Blockly.Msg.OTTO9_EYES_CHOICE = [["üòÉ feliz1", "happy_bmp"],["üôÇ feliz2", "eyes_bmp"], ["üò¶ triste", "sad_bmp"], ["üò° faminto1", "angry_bmp"], ["üò° faminto2", "angry2_bmp"], ["üò∞ livre", "freetful_bmp"], ["üòï confuso", "confused_bmp"],["üò¥ dormir", "sleep_bmp"],["üòç amor", "love_bmp"],  ["üòë onda", "wave_bmp"], ["ü§© magia", "magic_bmp"], ["üòû falhou", "fail_bmp"], ["ü§ñ logo", "logo_bmp"], ["‚ùå‚ùå no", "XX_bmp"], ["x x", "xx_bmp"],["‚ñâ", "full_bmp"]];
Blockly.Msg.OTTO9_EYESTEXT_TEXT = "texto nos olhos";
Blockly.Msg.OTTO9_EYES_CLEAR_TEXT = " olhos limpos";
Blockly.Msg.OTTO9_MATRIX_TOOLTIP = "limitado a MAISCULOS A at√© Z N√öMEROS 0 at√© 9 : ; < >  = @, max.9 caracteres";
Blockly.Msg.OTTO9_MATRIXTEXT_TEXT = "texto na boca";
Blockly.Msg.OTTO9_CLEAR_TEXT = " limpar boca";
Blockly.Msg.OTTO9_CLEAR_TOOLTIP = "Desligar todos os LEDs da boca na matriz 8x8";
Blockly.Msg.OTTO9_ARMS_TEXT = "bra√ßos";
Blockly.Msg.OTTO9_ARMS_TOOLTIP = "mova os bra√ßos!";
Blockly.Msg.OTTO9_ARMS_CHOICE = [["m√£os ao alto", "HANDSUP"], ["onda manual esquerda", "HANDWAVE1"], ["onda manual direita", "HANDWAVE2"]];