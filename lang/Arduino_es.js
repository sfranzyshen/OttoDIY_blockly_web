'use strict';
goog.provide ('Blockly.Msg.fr');
goog.require ('Blockly.Msg');
// Electron window
Blockly.Msg.com1 = "Seleccionar puerto USB";
Blockly.Msg.com2 = "üîî Seleccione USB por favor";
Blockly.Msg.check = "Verificar ...";
Blockly.Msg.upload = "Cargar ...";
Blockly.Msg.error = "üîî ERROR: bloques no conectados";
Blockly.Msg.verif = "üîî Verifique el c√≥digo primero"
Blockly.Msg.save = "Guardar como formato";
Blockly.Msg.update = "Actualizar";
Blockly.Msg.new_update = "Hay una nueva versi√≥n disponible, ¬ødesea descargarla e instalarla ahora?" ;
Blockly.Msg.yes = "yes";
Blockly.Msg.no = "no";
Blockly.Msg.uptodate = "üíØ ¬°La versi√≥n est√° actualizada!" ;
Blockly.Msg.download = "Descarga completada, la aplicaci√≥n se instalar√° y reiniciar√° ..."
// common to all blocks
Blockly.Msg.HELPURL = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pin = "en el pin";
Blockly.Msg._AT = "at";
Blockly.Msg.AV = "adelante";
Blockly.Msg.AR = "hacia atr√°s";
Blockly.Msg.high = "HIGH"; // do not translate
Blockly.Msg.low = "LOW"; // do not translate
Blockly.Msg.right = "derecha";
Blockly.Msg.left = "izquierda";
Blockly.Msg.LetR = "derecha e izquierda";
Blockly.Msg.direction = "direccion";
Blockly.Msg.vitesse = "velocidad";
// categories (menu)
Blockly.Msg.CAT_STOCKAGE = "‚äû Almacenamiento";
Blockly.Msg.CAT_numerique = "- Digital";
Blockly.Msg.CAT_analogique = "~ Analog";
Blockly.Msg.CAT_wifi = "Ôº† Wifi";
Blockly.Msg.CAT_TAB = "‚ñ¶ Tabla";
Blockly.Msg.CAT_list = "‚ñ§ Lista";
Blockly.Msg.CAT_servo = "‚Ü∑ Servo";
Blockly.Msg.CAT_del = "‚òÑ LED";
Blockly.Msg.CAT_LOGIC = "‚áã L√≥gica";
Blockly.Msg.CAT_MATH = "‚àë Math";
Blockly.Msg.CAT_TEXT = "‚ùù Texto";
Blockly.Msg.CAT_VARIABLES = "‚Üù Variable";
Blockly.Msg.CAT_FUNCTIONS = "‚à¨ Funci√≥n";
Blockly.Msg.CAT_ARDUINO = "‚àû Estructura";
Blockly.Msg.CAT_ARDUINO_IN = "‚áÖ Entrada / Salida";
Blockly.Msg.CAT_ARDUINO_OUT = "‚ò∫ Salir";
Blockly.Msg.CAT_ARDUINO_TIME = "‚óå Tiempo";
Blockly.Msg.CAT_actionneur = "‚Üª Motor";
Blockly.Msg.CAT_com = "‚òé Comunicaci√≥n";
Blockly.Msg.CAT_ARDUINO_COMM_SERIAL = "- Serie";
Blockly.Msg.CAT_ARDUINO_COMM_SOFTSERIAL = "- Software";
Blockly.Msg.CAT_ARDUINO_moteur = "‚Üª Motor DC";
Blockly.Msg.CAT_ultrason = "‚á£ Sensor";
Blockly.Msg.CAT_bluetooth = "‚òè Bluetooth";
Blockly.Msg.CAT_ARDUINO_matrice8x8 = "‚ñë LED Boca";
Blockly.Msg.CAT_ARDUINO_matrice16x8 = "‚ñë LED Ojos";
Blockly.Msg.CAT_DFRobot_SHIELD_LCDKEYPAD = "‚ñÄ Pantalla LCD";
Blockly.Msg.CAT_iot = "‚òÅ IoT";
Blockly.Msg.CAT_html = "‚úâ HTML";
Blockly.Msg.CAT_DFPLAYER = "‚ô´ Audio";
Blockly.Msg.CAT_OTTO = "‚äü Otto";
Blockly.Msg.CAT_OTTOH = "‚äü Humanoid";
Blockly.Msg.CAT_OLED_U8G = "‚ñÄ OLED";
Blockly.Msg.CAT_NEOPIXEL = "‚òÑ Neopixel";
//Wireless
Blockly.Msg.esp8266_init_tooltip = "inicializaci√≥n del m√≥dulo wifi y conexi√≥n con los par√°metros indicados";
Blockly.Msg.esp8266_1 = "Esp 8266";
Blockly.Msg.esp8266_2 = "SSID";
Blockly.Msg.esp8266_3 = "clave";
Blockly.Msg.esp8266_4 = "IP";
Blockly.Msg.esp8266_5 = "puerta de enlace";
Blockly.Msg.esp8266_6 = "m√°scara";
Blockly.Msg.esp8266_7 = [[" cliente ","cliente "], [" servidor "," servidor "]];
Blockly.Msg.esp8266_8 = "puerto";
Blockly.Msg.esp8266_9 = [[" din√°mico "," din√°mico "], [" est√°tico "," est√°tico "]];
Blockly.Msg.esp8266_10 = "direcci√≥n";
Blockly.Msg.esp8266_recept_tooltip = "recepci√≥n";
Blockly.Msg.esp8266_url = "https://github.com/OttoDIY/esp";
Blockly.Msg.esp8266_html_tooltip = "";
Blockly.Msg.esp8266_send_html_tooltip = "";
Blockly.Msg.esp8266_send_html = "enviar p√°gina HTML";
Blockly.Msg.esp8266_start_tooltip = "";
Blockly.Msg.esp8266_start = "iniciar servidor";
Blockly.Msg.esp8266_request_tooltip = "";
Blockly.Msg.esp8266_request = "si en la consulta encontramos";
Blockly.Msg.esp8266_request_container = "encontramos";
//INTERRUPTION
Blockly.Msg.LKL_ATTACHINTERRUPT_PIN = 'Interrupci√≥n: cuando a';
Blockly.Msg.LKL_DETACHINTERRUPT_PIN = "deshabilitar interrupci√≥n en pin";
Blockly.Msg.LKL_TOOLTIP_INOUT_ATTACHINTERRUPT = "Especifica una acci√≥n a tomar cuando ocurre una interrupci√≥n externa (4 modos posibles) en el pin 2 o 3";
Blockly.Msg.LKL_TOOLTIP_INOUT_DETACHINTERRUPT = "Deshabilitar la interrupci√≥n externa especificada anteriormente";
Blockly.Msg.LKL_MODE = 'se detecta en el pin';
// FIELDDROPDOWN
Blockly.Msg.note = [["DO \u2083", "261"], ["RE \u2083", "293"], ["MI \u2083", "329"], ["FA \u2083", "349"], ["SOL \u2083", "392"], ["LA \u2083", "440"], ["SI \u2083", "493"], ["DO \u2084", "523 "], [" RE \u2084 "," 587 "], [" MI \u2084 "," 659 "], [" FA \u2084 "," 698 "], [" SOL \u2084 "," 784 "] , ["LA \u2084", "880"]];
Blockly.Msg.tempo = [["\u266B", "125"], ["\u266A", "250"], ["\u2669", "500"], ["ùÖóùÖ•", "1000"], ["ùÖù", "2000"]];
Blockly.Msg.on_off = [["on", "LOW"], ["off", "HIGH"]];
Blockly.Msg.menublink = [[" lentamente "," 1000 "], [" r√°pido "," 100 "]];
Blockly.Msg.AV_AR = [[Blockly.Msg.AV, "FORWARD"], [Blockly.Msg.AR, "BACKWARD"]]; // do not translate
Blockly.Msg.times = [["segundos", "s"], ["milisegundos", "m"], ["microsegundos", "u"]];
Blockly.Msg.time = [["segundos", "s"], ["milisegundos", "m"]];
Blockly.Msg.char_lcd = [["# 1", "1"], ["# 2", "2"], ["3", "3"], ["# 4", "4"], ["# 5", "5"], ["# 6", "6"], ["No. 7", "7"], ["# 8", "8"]];
Blockly.Msg.rxtx = [["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6 "," 6 "], [" 7 "," 7 "], [" 8 "," 8 "], [" 9 "," 9 "], [" 10 "," 10 "], [" 11 "," 11 "], [" 12 "," 12 "], [" 13 "," 13 "]];
Blockly.Msg.FIELDDROPDOWN = [["1(high state)", Blockly.Msg.high], ["0(low state)", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_0_1 = [["UP", Blockly.Msg.high], ["DOWN", Blockly.Msg.low]];
Blockly.Msg.ligne = [["1", "0"], ["2", "1"]];
Blockly.Msg.colonne = [[ "1", "0"], [ "2", "1"], [ "3", "2"], [ "4", "3"], [ "5 "," 4 "], [" 6 "," 5 "], [" 7 "," 6 "], [" 8 "," 7 "], [" 9 "," 8 "], [" 10 "," 9 "], [" 11 "," 10 "], [" 12 "," 11 "], [" 13 "," 12 "], [" 14 "," 13 "], [" 15 "," 14 "], [" 16 "," 15 "]];
Blockly.Msg.FIELDDROPDOWN_ONOFF = [["encender", Blockly.Msg.high], ["apagar", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_ONOFF_matrice = [["1", "true"], ["0", "false"]];
Blockly.Msg.FIELDDROPDOWN_av_ar = [[Blockly.Msg.AV, Blockly.Msg.high], [Blockly.Msg.AR, Blockly.Msg.low]];
Blockly.Msg.LKL_DROPDOWN = [[' flanco ascendente ',' RISING '], [' flanco descendente ',' FALLING '], [' estado cambiante ',' CAMBIO '], [' estado bajo ', Blockly. Msg.low]];
Blockly.Msg.irq = [['borde ascendente', 'Pin.IRQ_RISING'], ['borde descendente', 'Pin.IRQ_FALLING'], ['estado alto', 'Pin.IRQ_HIGH_LEVEL'], ["estado bajo "," Pin.IRQ_LOW_LEVEL "]];
Blockly.Msg.menudht = [[" humedad "," h "], [" temperatura "," t "]];
Blockly.Msg.couleur = [["azul", "azul"], ["amarillo", "amarillo"], ["rojo", "rojo"], ["verde", "verde"]];
Blockly.Msg.sens = [["adelante", "a"], ["girar a la derecha", "d"], ["girar a la izquierda", "g"]];
//sensor
Blockly.Msg.VL53L0X = "Sensor de distancia l√°ser";
Blockly.Msg.VL53L0X_tooltip = "inicializar sensor. \n Sensor <--> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.VL53L0X_distance = "distancia medida por l√°ser";
Blockly.Msg.VL53L0X_distance_tooltip = "VL530X: \nretorno Distancia medida por l√°ser en mm";
Blockly.Msg.bme280 = "Sensor de presi√≥n atmosf√©rica";
Blockly.Msg.bme280_tooltip = "inicializar sensor. \nSensor <--> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.bme280_pressure = "presi√≥n atmosf√©rica";
Blockly.Msg.bme280_pressure_tooltip = "BME280: \nrecuperar la presi√≥n atmosf√©rica en hPa";
Blockly.Msg.inter = "cambiar es";
Blockly.Msg.inter_tooltip = "devuelve true (false) si el interruptor est√° (no est√°) en la posici√≥n indicada";
Blockly.Msg.mc005 = "presencia detectada en el pin";
Blockly.Msg.mc005_tooltip = "MC005: \n devuelve true (false) si se detecta (no se detecta) una presencia";
Blockly.Msg.bp = "bot√≥n presionado en el pin";
Blockly.Msg.bp_tooltip = "devuelve true (false) si se presiona (no se presiona) un bot√≥n";
Blockly.Msg.dht11_tooltip = "DHT11: \n devuelve la humedad del aire (del 20 al 80%) o \n la temperatura (de 2 a 50 ¬∞ C)";
Blockly.Msg.dht22_tooltip = "DHT22: \n devuelve la humedad del aire (de 0 a 100%) o \n la temperatura (de -40 a 80 ¬∞ C)";
Blockly.Msg.suiveur_ligne = "l√≠nea negra detectada en el pin";
Blockly.Msg.suiveur_ligne_tooltip = "CAP227: \n devuelve true (false) si se detecta (no se detecta) una l√≠nea negra";
Blockly.Msg.light = "brillo en el pin";
Blockly.Msg.light_tooltip = "devuelve un valor dependiendo del brillo \n0: oscuridad \n255: luz completa";
Blockly.Msg.hum = "humedad del suelo en el pasador";
Blockly.Msg.hum_tooltip = "CAP 615: \n devuelve la humedad del suelo de 0 a 100%";
Blockly.Msg.light_tooltip = "devuelve un valor dependiendo del brillo \n0: oscuridad \n255: luz completa";
Blockly.Msg.grove_ldr = "brillo en el pin";
Blockly.Msg.grove_ldr_tooltip = "devuelve el brillo medido \n0: sin luz \n100: luz muy intensa";
Blockly.Msg.potar = "posici√≥n del cursor en el pin";
Blockly.Msg.potar_tooltip = "devuelve un valor basado en la posici√≥n del cursor \n0: cursor izquierda \n255: cursor derecha";
Blockly.Msg.lm35 = "temperatura en el pin";
Blockly.Msg.lm35_tooltip = "LM35: \n devuelve la temperatura medida en grados cent√≠grados (de 0 a 80 ÔøΩ)";
Blockly.Msg.ultrason_1 = "distancia <l√≠mite";
Blockly.Msg.ultrason_2 = "devuelve un estado Alto si la distancia medida es menor que el l√≠mite";
Blockly.Msg.ultrason_distance1 = "distancia medida por ultrasonido";
Blockly.Msg.ultrason_tooltip = "HC-SR04: \nSensor de sonido que permite realizar mediciones de distancia (de 3 cm y 4 m) \nindicar los pines del Arduino al que se conectar√°n TRIG y ECHO";
Blockly.Msg.ultrason = "pines de ultrasonido";
Blockly.Msg.ultrason_distance2 = "HC-SR04: \n devuelve la distancia medida en cm por el detector ultras√≥nico";
Blockly.Msg.ultrason_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pir = "movimiento detectado";
Blockly.Msg.feu = "llama detectada";
Blockly.Msg.presence = "obst√°culo detectado";
Blockly.Msg.appui = "tocar";
Blockly.Msg.pir_tooltip = "HC-SR501: \n devuelve true (false) si se detecta (no se detecta) una presencia";
Blockly.Msg.feu_tooltip = "CAP168: \n devuelve true (false) si se detecta (no se detecta) una llama";
Blockly.Msg.presence_tooltip = "CAP711: \n devuelve true (false) si un contacto ha tenido lugar (no)";
Blockly.Msg.appui_tooltip = "CAP831: \n devuelve true (false) si un soporte es (no es) detectado";
// Bluetooth
Blockly.Msg.bluetooth1 = "si los datos recibidos por bluetooth";
Blockly.Msg.bluetooth1_tooltip = "recepci√≥n de datos bluetooth \n conectando el m√≥dulo HC-06 a los pines 0 y 1 \ pines cruzados de red Rx y Tx";
Blockly.Msg.bluetooth2 = "enviar por bluetooth";
Blockly.Msg.bluetooth2_tooltip = "env√≠a datos a trav√©s del bluetooth \nconectando el m√≥dulo HC-06 a los pines 0 y 1 \ pines cruzados de red Rx y Tx";
Blockly.Msg.bluetooth_init_tooltip = "";
Blockly.Msg.bluetooth_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy-plus"; // do not translate
//Pantalla LCD
Blockly.Msg.lcd_fond = "bottom";
Blockly.Msg.LCD = "Pantalla LCD";
Blockly.Msg.LCDi2c_tooltip = "inicializa el LCD I2C de 2 l√≠neas y 16 caracteres con retroiluminaci√≥n RGB. \ N Pantalla <-> Arduino \ nSDA <--------> A4 \ nSCL <- ---- ---> A5 ";
Blockly.Msg.LCD_tooltip = "inicializa la pantalla LCD, 2 l√≠neas y 16 caracteres, indicando los pines para conectar";
Blockly.Msg.LCD_SHIELD_PRINT_HELPURL = "https://www.arduino.cc/en/Tutorial/HelloWorld";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT = "mostrar en LCD";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT_tooltip = "muestra el texto en la ubicaci√≥n especificada";
Blockly.Msg.LCD_SHIELD_PRINT_TOOLTIP = "escribe el texto en la pantalla LCD";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT1 = "l√≠nea 1";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT2 = "l√≠nea 2";
Blockly.Msg.LCD_line = "l√≠nea";
Blockly.Msg.LCD_col = "columna";
Blockly.Msg.LCD_raz = "borrar la pantalla LCD";
Blockly.Msg.LCD_raz_tooltip = "borrar pantalla";
Blockly.Msg.lcd_aff_symbole = "mostrar el s√≠mbolo";
Blockly.Msg.lcd_aff_symbole_tooltip = "muestra el s√≠mbolo que se ha definido antes";
Blockly.Msg.lcd_symbole = "define el s√≠mbolo";
Blockly.Msg.lcd_symbole_tooltip = "definici√≥n de un car√°cter para la pantalla LCD: \n 0 apaga un p√≠xel \n 1 enciende un p√≠xel";
// estructura
Blockly.Msg.loop = "Bucle";
Blockly.Msg.init = "Configuraci√≥n";
Blockly.Msg.base_setup_loop = "La funci√≥n de inicializaci√≥n: \nSe usa para inicializar las variables, la direcci√≥n de los pines ... \nSe ejecuta solo una vez \nLa funci√≥n de bucle: \nEsta es la parte principal del programa, todo los bloques colocados aqu√≠ se ejecutar√°n en bucle e indefinidamente (varios miles de veces por segundo) "
Blockly.Msg.loop_tooltip = "todos los bloques colocados aqu√≠ se ejecutar√°n en un bucle e indefinidamente (varios miles de veces por segundo)";
Blockly.Msg.begin_tooltip = "este bloque se utiliza para definir el orden en que se debe ejecutar el programa";
Blockly.Msg.begin = "START";
Blockly.Msg.def = "Declaraci√≥n";
Blockly.Msg.def_tooltip = "todos los bloques colocados aqu√≠ solo se ejecutar√°n una vez, aqu√≠ es donde se configuran los diferentes sensores o actuadores";
Blockly.Msg.END = "END";
Blockly.Msg.END_tooltip = "Detener el programa, los bloques colocados despu√©s ser√°n ignorados";
Blockly.Msg.code_tooltip = "Escriba una instrucci√≥n aqu√≠ que no est√© en bloques";
//matriz
Blockly.Msg.matriceLC = "poner el LED, l√≠nea";
Blockly.Msg.matrice_create_aff = "Crear bloque 'mostrar s√≠mbolo% 1'";
Blockly.Msg.matrice_create_symbole = "Crear el bloque 'establecer el s√≠mbolo% 1'";
Blockly.Msg.matrice = "matriz";
Blockly.Msg.matrice8x8_tooltip = "Inicializaci√≥n de la matriz a 64 LED, es necesario indicar los pines del arduino al que se conectar√°n DIN, CLK, CS";
Blockly.Msg.matrice8x8_symbole = "define el s√≠mbolo";
Blockly.Msg.matrice8x8_symbole_tooltip = "definici√≥n de un s√≠mbolo para la matriz: \n 0 apaga un LED \n 1 enciende un LED";
Blockly.Msg.matrice8x8_efface = "borrar la matriz";
Blockly.Msg.matrice8x8_aff = "mostrar el s√≠mbolo";
Blockly.Msg.matrice8x8_binaire_tooltip = "1 enciende un LED de la matriz y 0 lo apaga";
Blockly.Msg.matrice8x8_del_tooltip = "Enciende (apaga) un LED en la matriz que indica sus coordenadas \nLa marcaci√≥n de precauci√≥n comienza en 0";
Blockly.Msg.matrice8x8_aff_tooltip = "Mostrar el s√≠mbolo que se ha definido previamente";
Blockly.Msg.matrice8x8_efface_tooltip = "Apague todos los LED en la matriz";
Blockly.Msg.matrice8x8_helpurl = "https://playground.arduino.cc/Main/MAX72XXHardware/#WiringPrintout";
Blockly.Msg.matrice16x8_tooltip = "Inicializaci√≥n de la matriz a 128 LED. \nMatriz <-> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.matrice16x8_symbole = "define el s√≠mbolo";
Blockly.Msg.matrice16x8_symbole_tooltip = "definici√≥n de un s√≠mbolo para la matriz: \n 0 apaga un LED \n 1 enciende un LED";
Blockly.Msg.matrice16x8_efface = "apaga los LED de la matriz";
Blockly.Msg.matrice16x8_aff = "mostrar el s√≠mbolo";
Blockly.Msg.matrice16x8_binaire_tooltip = "1 enciende un LED de la matriz y 0 lo apaga";
Blockly.Msg.matrice16x8_del_tooltip = "Enciende (apaga) un LED en la matriz que indica sus coordenadas \nLa marcaci√≥n de precauci√≥n comienza en 0";
Blockly.Msg.matrice16x8_aff_tooltip = "Mostrar el s√≠mbolo que se ha definido previamente";
Blockly.Msg.matrice16x8_efface_tooltip = "Apague todos los LED en la matriz";
Blockly.Msg.matrice16x8_helpurl = "";
//hora
Blockly.Msg.millis = "tiempo transcurrido en";
Blockly.Msg.millis_start = "iniciar un cronometraje en";
Blockly.Msg.millis_tooltip = "";
Blockly.Msg.millis_start_tooltip = "";
Blockly.Msg.ARDUINO_INOUT_Pulsein = "devuelve la duraci√≥n en microsegundos de un pulso UP o DOWN aplicado a un pin. Si el valor del par√°metro es HIGH, el bloque espera a que el pin llegue a HIGH, comienza el tiempo, espera que el pin regrese al nivel BAJO y luego detenga el tiempo ";
Blockly.Msg.ARDUINO_BASE_DELAY = "esperar";
Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP = "Especifique el tiempo de espera en segundos, milisegundos o microsegundos. \n El programa no hace nada m√°s durante este tiempo";
Blockly.Msg.millis1 = "duraci√≥n en";
Blockly.Msg.millis2 = "desde el principio";
Blockly.Msg.ARDUINO_SINCE_PROGRAM_STARTED_TOOLTIP = "devuelve la duraci√≥n en milisegundos, segundos o microsegundos desde que se inici√≥ el programa";
Blockly.Msg.ARDUINO_PULSEIN = "duraci√≥n del estado";
Blockly.Msg.tempo_helpurl = "https://www.arduino.cc/en/tutorial/blink";
Blockly.Msg.tempo_tooltip = "Este bloque verifica si el tiempo indicado ha llegado, si es el caso, entonces ejecuta los bloques colocados dentro ... A diferencia del bloque 'esperar' este no est√° bloqueando." ;
Blockly.Msg.tempo1 = "todos";
//OLED
Blockly.Msg.lp2i_u8g_draw_string = "OLED I2C display";
Blockly.Msg.lp2i_u8g_draw_string_Text = "text to display =";
Blockly.Msg.lp2i_u8g_draw_string_X = "raw x (127 max) =";
Blockly.Msg.lp2i_u8g_draw_string_Y = "line y (63 max) =";
Blockly.Msg.lp2i_u8g_draw_4strings = "OLED I2C display";
Blockly.Msg.lp2i_u8g_draw_4strings_texts_to_display = "texts to display :";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line1 = "line 1 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line2 = "line 2 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line3 = "line 3 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line4 = "line 4 =";
Blockly.Msg.lp2i_u8g_print = "OLED I2C display";
Blockly.Msg.lp2i_u8g_print_N = "Number to display ="
Blockly.Msg.lp2i_u8g_print_X = "raw x (127 max) =";
Blockly.Msg.lp2i_u8g_print_Y = "line y (63 max) =";
Blockly.Msg.lp2i_u8g_4draw_print = "OLED I2C display";
Blockly.Msg.lp2i_u8g_4draw_print_to_display = "to display :";
Blockly.Msg.lp2i_u8g_4draw_print_Text_line1 = "line 1 =";
Blockly.Msg.lp2i_u8g_4draw_print_N1 = "Number 1 (at end) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line2 = "line 2 =";
Blockly.Msg.lp2i_u8g_4draw_print_N2 = "Number 2 (at end) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line3 = "line 3 =";
Blockly.Msg.lp2i_u8g_4draw_print_N3 = "Number 3 (at end) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line4 = "line 4 =";
Blockly.Msg.lp2i_u8g_4draw_print_N4 = "Number 4 (at end) ="
// LED
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT = "el LED en el tablero";
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP = "Apague o encienda el LED en la placa Arduino";
Blockly.Msg.blink = "parpadea el LED de la placa";
Blockly.Msg.blink_tooltip = "El LED de la placa parpadea 1 o 10 veces por segundo";
Blockly.Msg.del = "el LED en el pin";
Blockly.Msg.del_tooltip = "enciende (apaga) el LED conectado al pin indicado";
Blockly.Msg.bargraphe = "gr√°fico de barras";
Blockly.Msg.bargraphe_allume = "encienda los LED a";
Blockly.Msg.bargraphe_allume_tooltip = "0 no enciende LED \n2,5 enciende los primeros 2 LED y la tercera mitad se enciende \n10 enciende todos los LED";
Blockly.Msg.bargraphe_tooltip = "m√≥dulo de gr√°fico de barras compuesto por 10 LED (8 verdes, 1 amarillo y 1 rojo), es necesario indicar los pines del arduino en el que se conectar√°n DCKI y DI";
Blockly.Msg.rvb_init = "LED RGB";
Blockly.Msg.rvb_init_tooltip = "indica los pines PWM para conectar al LED RGB";
Blockly.Msg.rvb_set = "mostrar color";
Blockly.Msg.rvb_set_tooltip = "muestra un color que indica un valor para los tres componentes (rojo, verde, azul)";
Blockly.Msg.pixel1 = "RGB NeoPixel";
Blockly.Msg.pixel2 = "actualizar p√≠xeles";
Blockly.Msg.pixel3 = "con color";
Blockly.Msg.pixel4 = "n√∫mero";
Blockly.Msg.pixel5 = "establecer el brillo del p√≠xel en";
Blockly.Msg.pixel6 = "establecer el p√≠xel";
Blockly.Msg.pixel1_tooltip = "El m√≥dulo neopixel RGB indica el pin que se va a conectar y la cantidad de p√≠xeles";
Blockly.Msg.pixel2_tooltip = "mostrar los cambios realizados";
Blockly.Msg.pixel5_tooltip = "ajusta el brillo del p√≠xel (de 0 a 255)";
Blockly.Msg.pixel3_tooltip = "elige el p√≠xel para iluminar y su color \nPrecauci√≥n, la numeraci√≥n comienza en 0";
// salida
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1 = "poner el pin DIGITAL";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP = "escribe un estado l√≥gico 0 o 1 en una salida espec√≠fica";
Blockly.Msg.toggle = "alternar el estado del pin";
Blockly.Msg.toggle_tooltip = "Toggle: \ n escribe un estado l√≥gico 0 si antes hab√≠a un estado 1 (y viceversa) en la salida especificada";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1 = "poner el pin PWM";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP = "enviar un valor entre 0 y 255 en una salida espec√≠fica";
// entrada
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT = "Estado del pin DIGITAL";
Blockly.Msg.in_pullup = "Pull-Up";
Blockly.Msg.in_pullup_tooltip = "devuelve el estado l√≥gico (0 o 1) del pin \nreturns 1 (estado alto) indicado por defecto si el pull-up est√° habilitado";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP = "leer el estado l√≥gico 0 o 1 del pin digital";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT = "Valor del pin ANAL√ìGICO";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP = "devuelve un valor entre 0 y 1023";
// audio
Blockly.Msg.play = "reproducir";
Blockly.Msg.play_tooltip = "tocar la nota";
Blockly.Msg.play_helpurl = "";
Blockly.Msg.beep = "pitido en el pin";
Blockly.Msg.beep_TOOLTIP = "pitidos (a 440Hz por 1s) en el pin seleccionado";
Blockly.Msg.ARDUINO_TONE_INPUT1 = "emitir un sonido en el pin";
Blockly.Msg.ARDUINO_TONE_INPUT2 = "frecuencia (Hz)";
Blockly.Msg.ARDUINO_TONE_INPUT3 = "duraci√≥n (ms)";
Blockly.Msg.ARDUINO_TONE_TOOLTIP = "emitir un sonido en el pin seleccionado, a la frecuencia deseada y durante el tiempo deseado";
Blockly.Msg.ARDUINO_NOTONE_INPUT = "detener el sonido en el pin";
Blockly.Msg.ARDUINO_NOTONE_TOOLTIP = "detener el sonido en el pin seleccionado";
Blockly.Msg.lp2i_mp3_helpurl = "https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299";
Blockly.Msg.lp2i_mp3_Volume = "volumen [0-48]";
Blockly.Msg.lp2i_mp3_autoplay = "Reproducci√≥n autom√°tica";
Blockly.Msg.lp2i_mp3 = "reproductor de MP3";
Blockly.Msg.lp2i_mp3_tooltip = "DFPlayer Mini mp3: \ ninicializaci√≥n del m√≥dulo, volumen y modo operativo \nM√≥dulo MP3 <-> Arduino \nRx (2) <------------- -> Tx (1) ";
Blockly.Msg.lp2i_mp3_play = "reproducir el archivo mp3";
Blockly.Msg.lp2i_mp3_play_track_tooltip = "reproducir la canci√≥n especificada";
Blockly.Msg.lp2i_mp3_play_tooltip = "reproduce la canci√≥n actual";
Blockly.Msg.lp2i_mp3_pause = "pausar el archivo mp3";
Blockly.Msg.lp2i_mp3_pause_tooltip = "detener la canci√≥n actual";
Blockly.Msg.lp2i_mp3_prev = "leer el archivo mp3 anterior";
Blockly.Msg.lp2i_mp3_prev_tooltip = "reproducir la pista anterior";
Blockly.Msg.lp2i_mp3_vol = "establecer el volumen en";
Blockly.Msg.lp2i_mp3_vol_tooltip = "establece el volumen al valor especificado [0-48]";
Blockly.Msg.lp2i_mp3_next = "leer el siguiente archivo mp3";
Blockly.Msg.lp2i_mp3_next_tooltip = "reproduce la siguiente canci√≥n";
// servo motor
Blockly.Msg.ARDUINO_SERVO_MOVE_INPUT1 = "rotar servo";
Blockly.Msg.ARDUINO_SERVO_MOVE_DEGREE = "√°ngulo [0 ¬∞ -180 ¬∞]";
Blockly.Msg.ARDUINO_SERVO_MOVE_TOOLTIP = "posible rotaci√≥n entre 0 y 180 grados";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TEXT = "spin servo";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TOOLTIP = "Girar el servo conectado al pin especificado, a la velocidad indicada y en la direcci√≥n seleccionada";
//motor
Blockly.Msg.mot_tooltip = "Blindaje del controlador de motor L293D: \n activa ambos motores (M1 y M2) para avanzar o girar, la velocidad se puede establecer entre 0 y 90";
Blockly.Msg.mot_stop = "stop";
Blockly.Msg.mot_stop_tooltip = "Escudo del controlador de motor L293D: \ndetenga los dos motores (M1 y M2)";
Blockly.Msg.moteur = "activar el motor";
Blockly.Msg.moteurstop = "parar el motor";
Blockly.Msg.moteur_tooltip = "arranca el motor de CC conectado al pin especificado, a la velocidad indicada \nspeed = 0 -> parada del motor";
Blockly.Msg.moteurdagu_tooltiprs040 = "Tarjeta RS 040: \ n activa una de las 2 salidas para conducir motores de CC, la velocidad se puede establecer entre 0 y 90";
Blockly.Msg.moteurdagu_tooltiprs040stop = "Tarjeta RS 040: \ ndetener uno de los 2 motores";
Blockly.Msg.moteurdagu_tooltiprs027 = "Tarjeta RS 027: \ n opera una de las 2 salidas para conducir motores de CC, la velocidad se puede establecer entre 0 y 90";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR1 = "v1 - Motor DC";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR2 = "v2 - Motor DC";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_DIRECTION = "direction";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_VITESSE = Blockly.Msg.vitesse + "[0-255]";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_AVANT = "adelante";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_ARRIERE = "hacia atr√°s";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_STOP = "detener";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP1 = "v1 - Motor paso a paso";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP2 = "v2 - motor paso a paso";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_CONNECT = "pin";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_PPT = "no por turno";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_RPM = "velocidad (RPM)";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_NB_PAS = "n√∫mero de pasos";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC1 = "Motor DC 1";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC2 = "Motor DC 2";
Blockly.Msg.m_pap = "motor paso a paso";
Blockly.Msg.m_pap_step = "paso";
Blockly.Msg.m_pap_step1 = "avanzar";
Blockly.Msg.m_pap_tooltip = "Inicializaci√≥n de un motor paso a paso. \ NIndique el n√∫mero de pasos, la velocidad en rpm y los pines para conectar";
Blockly.Msg.m_pap_step_tooltip = "activa el motor paso a paso por la cantidad de pasos indicados, la siguiente instrucci√≥n solo se ejecutar√° una vez que se haga la rotaci√≥n del motor";
// serial
Blockly.Msg.Serial_Init = "puerto serie activado";
Blockly.Msg.Serial_Init_tooltip = "Establecer la velocidad de comunicaci√≥n en caracteres por segundo para la comunicaci√≥n en serie";
Blockly.Msg.Serial_Write = "enviar al puerto serie";
Blockly.Msg.Serial_write_tooltip = "Enviar datos al puerto serie";
Blockly.Msg.Serial_read = "datos le√≠dos en el puerto serie";
Blockly.Msg.Serial_read_tooltip = "devuelve el primer byte de datos disponible en el puerto serie, o -1 si no hay datos disponibles";
Blockly.Msg.Serial_available = "cantidad de datos en el puerto serie";
Blockly.Msg.Serial_available_tooltip = "devuelve el n√∫mero de bytes disponibles en la cola del puerto serie, o 0 si no hay nada disponible";
Blockly.Msg.Serial_saut = "un salto de l√≠nea";
Blockly.Msg.Serial_saut_tooltip = "devuelve un salto de l√≠nea en el monitor en serie";
Blockly.Msg.Serial_space = "un separador";
Blockly.Msg.Serial_space_tooltip = "devolver un espacio en el monitor en serie";
Blockly.Msg.repl_read = "comando ingresado por el usuario";
// serie de software
Blockly.Msg.SSERIAL_Init = "puerto de software en Rx";
Blockly.Msg.SSERIAL_tooltip = "Creando un nuevo puerto de comunicaci√≥n usando los pines y la velocidad especificados";
Blockly.Msg.SSERIAL_Read = "datos le√≠dos en el puerto de software";
Blockly.Msg.SSERIAL_Read_tooltip = "devuelve el primer byte de datos entrantes disponibles en el puerto de software, o -1 si no hay datos disponibles";
Blockly.Msg.SSERIAL_Write = "enviar al puerto de software";
Blockly.Msg.SSERIAL_Write_tooltip = "Enviar datos al puerto de software";
Blockly.Msg.SSERIAL_Read_tooltip = "devuelve el primer byte de datos entrantes disponibles en el puerto de software, o -1 si no hay datos disponibles";
Blockly.Msg.SSERIAL_Available = "cantidad de datos en el puerto de software";
Blockly.Msg.SSERIAL_Available_tooltip = "devuelve el n√∫mero de bytes disponibles en la cola del puerto de software, o 0 si no hay nada disponible";
//////////////////////////// OTTO DIY Robot /////////////////// //
Blockly.Msg.OTTO9_HOME_TEXT = "inicio";
Blockly.Msg.OTTO9_HOME_TOOLTIP = "Otto va directamente a la posici√≥n inicial";
Blockly.Msg.OTTO9_DIY_URL = "https://wikifactory.com/+OttoDIY/otto-diy";
Blockly.Msg.OTTO9_HUMANOID_URL = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.OTTO9_CALIBRATION='calibrar ';
Blockly.Msg.OTTO9_CALIBRATION_LEG='pierna ';
Blockly.Msg.OTTO9_CALIBRATION_FOOT='pie ';
Blockly.Msg.OTTO9_CALIBRATION_ARM='brazo ';
Blockly.Msg.OTTO9_CALIBRATION_TOOLTIP = 'usa peque√±os valores positivos y negativos de forma iterativa, cambia gradualmente hasta que est√© completamente recto (90¬∫)';
Blockly.Msg.OTTO9_EEPROM_TEXT = 'guardar Trims en EEPROM';
Blockly.Msg.OTTO9_EEPROM_TOOLTIP = 'Usar solo despu√©s de una l√≠nea completamente recta (90¬∫) una vez, eliminar este BLOQUE despu√©s para continuar la programaci√≥n';
Blockly.Msg.OTTO9_MOVE_TEXT = "mover";
Blockly.Msg.OTTO9_MOVE_TOOLTIP = "Otto movimientos b√°sicos";
Blockly.Msg.OTTO9_MOVE_CHOICE = [["‚Üë adelante", "FORWARD"], ["‚Üì hacia atr√°s", "BACKWARD"], ["‚Ü∫ girar a la izquierda", "LEFT"], ["‚Üª girar a la derecha", "RIGHT "], ["inclinar a la izquierda "," BENDLEFT "], ["inclinar a la derecha"," BENDRIGHT "], ["agitar izquierda"," SHAKELEFT "], ["agitar derecha"," SHAKERIGHT "], [" arriba "," jump "]];
Blockly.Msg.OTTO9_MOVEW_CHOICE = [["‚Üë adelante", "FORWARD"], ["‚Üì hacia atr√°s", "BACKWARD"], ["‚Ü∫ girar a la izquierda", "LEFT"],["‚Üª girar a la derecha", "RIGHT "]];
Blockly.Msg.OTTO9_MOVE_SPEED_TEXT = "velocidad";
Blockly.Msg.OTTO9_MOVE_SPEED_CHOICE = [[" normal "," 1000 "], [" lento "," 2000 "], [" muy lento "," 3000 "], [" r√°pido "," 750 "], [" muy r√°pido "," 500 "], ["demasiado r√°pido"," 250 "]];
Blockly.Msg.OTTO9_MOVEW_SPEED_CHOICE = [[" normal "," 45 "], [" lento "," 20 "], [" muy lento "," 10 "], [" r√°pido "," 60 "], [" muy r√°pido "," 90 "]];
Blockly.Msg.OTTO9_DANCE_TEXT = "bailar";
Blockly.Msg.OTTO9_DANCE_TOOLTIP = "¬°Otto dance!";
Blockly.Msg.OTTO9_DANCE_CHOICE = [["moonwalk ‚üµ", "moonwalkerLEFT"], ["moonwalk ‚ü∂", "moonwalkerRIGHT"], ["crusaito ‚üµ", "crusaitoLEFT"], ["crusaito ‚ü∂", "crusaitoRIGHT"] , ["aleteo ‚Üë", "flappingFRONT"], ["aleteo ‚Üì", "flappingBACK"]];
Blockly.Msg.OTTO9_DANCE_SIZE_TEXT = "tama√±o";
Blockly.Msg.OTTO9_DANCE_SIZE_CHOICE = [[" normal "," 25 "], [" peque√±o "," 10 "], [" grande "," 40 "]];
Blockly.Msg.OTTO9_DO_TEXT = "hacer";
Blockly.Msg.OTTO9_DO_TOOLTIP = "Otto movimientos complejos";
Blockly.Msg.OTTO9_DO_CHOICE = [["meneo"," swing "], ["subeBaja"," updown "], ["puntillasMeneo "," tiptoeSwing "], ["inquieto"," jitter "], [" giroAscendente "," ascendingTurn "]];
Blockly.Msg.OTTO9_GESTURE_TEXT = "gesto";
Blockly.Msg.OTTO9_GESTURE_TOOLTIP = "Sonidos emocionales combinados con movimientos";
Blockly.Msg.OTTO9_GESTURE_CHOICE = [["üòÉ", "OttoSuperHappy"], ["üôÇ", "OttoHappy"], ["üôÅ", "OttoSad"], ["üò¥", "OttoSleeping"], ["üòï "," OttoConfused "], [" üò∞ "," OttoFretful "], [" üòç "," OttoLove "], [" üò° "," OttoAngry "], [" ü§© "," OttoMagic "], [" üòê "," OttoWave "], [" üòé "," OttoVictory "], [" üòû "," OttoFail "], [" üí© "," OttoFart "]];
Blockly.Msg.OTTO9_SOUND_TEXT = "sonido";
Blockly.Msg.OTTO9_SOUND_TOOLTIP = "Sonidos emocionales";
Blockly.Msg.OTTO9_SOUND_CHOICE = [["üòÉ", "S_superHappy"], ["üôÇ", "S_happy"], ["üòä", "S_happy_short"], ["üôÅ", "S_sad"], ["üòï "," S_confused "], [" ü§ó "," S_cuddly "], [" üòÆ "," S_OhOoh "], [" üòØ "," S_OhOoh2 "], [" üò≤ "," S_surprise "], [" ü§ñ 1 "," S_connection "], [" ü§ñ2 "," S_disconnection "], [" üëá "," S_buttonPushed "], [" ‚ùó "," S_mode1 "], [" ‚ùó‚ùó "," S_mode2 "], ["‚ùó‚ùó‚ùó", "S_mode3"], ["üí§", "S_sleeping"], ["üí©1", "S_fart1"], ["üí©2", "S_fart2"], ["üí©3", "S_fart3"],];
Blockly.Msg.OTTO9_GETDISTANCE_TEXT = "distancia [cm]";
Blockly.Msg.OTTO9_GETDISTANCE_TOOLTIP = "Distancia de rango entre 2 cm y 400 cm";
Blockly.Msg.OTTO9_GETOBSTACLE_TEXT = "obst√°culo";
Blockly.Msg.OTTO9_OBSTACLE_CHOICE = [["cerca", "10"],["muy cerca", "3"],["lejos", "30"]];
Blockly.Msg.OTTO9_GETNOISE_TEXT = "ruido medido";
Blockly.Msg.OTTO9_GETNOISE_TOOLTIP = "100 es silencioso, 500 ruido y m√°s de 1000 es ruidoso, recuerde ajustar f√≠sicamente la sensibilidad del sensor";
Blockly.Msg.OTTO9_GETTOUCH_TEXT = "touch";
Blockly.Msg.OTTO9_GETTOUCH_TOOLTIP = "usar si es condicional";
Blockly.Msg.OTTO9_GETG_TEXT = "movimiento";
Blockly.Msg.OTTO9_MOUTH_TEXT = "boca";
Blockly.Msg.OTTO9_MOUTH_TOOLTIP = "emoci√≥n de boca para la matriz de LED 8x8 # 0-30";
Blockly.Msg.OTTO9_MOUTH_CHOICE = [["üòÉ", "happyOpen"], ["üôÇ", "happyClosed"], ["üòä", "smile"], ["üò¶", "23"], ["üôÅ "," 24 "], [" üòÆ "," smallSurprise "], [" üò≤ "," bigSurprise "], [" üòï "," confundido "], [" üòõ "," tongueOut "], [" üôÉ "," culito "], [" üòë "," lineMouth "], [" üôÑ "," 21 "], [" üíñ "," heart "], [" ü¶á1 "," vamp1 "], [" ü¶á2 "," vamp2 "], [" ‚ùå "," xMouth "], [" ‚úÖ "," okMouth "], [" ‚ùì "," 27 "], [" ‚ö° "," trueno "]];
Blockly.Msg.OTTO9_EYES_TEXT = "ojos";
Blockly.Msg.OTTO9_EYES_TOOLTIP = "emoci√≥n de los ojos por la matriz de LED i2C de 16x8";
Blockly.Msg.OTTO9_EYES_CHOICE = [["üòÉ", "happy_bmp"], ["üôÇ", "eyes_bmp"], ["üò¶", "sad_bmp"], ["üò°1", "angry_bmp"], [" üò°2 "," angry2_bmp "], [" üò∞ "," freetful_bmp "], [" üòï "," confused_bmp "], [" üò¥ "," sleep_bmp "], [" üòç "," love_bmp "], [ "üòë", "wave_bmp"], ["ü§©", "magic_bmp"], ["üòû", "fail_bmp"], ["ü§ñ", "logo_bmp"], ["‚ùå‚ùå", "XX_bmp"], ["xx", "xx_bmp"], ["‚ñâ", "full_bmp"]];
Blockly.Msg.OTTO9_EYESTEXT_TEXT = "texto de ojos";
Blockly.Msg.OTTO9_EYES_CLEAR_TEXT = " borrar ojos";
Blockly.Msg.OTTO9_MATRIX_TOOLTIP = "limitado a CAPITALS A a Z N√öMEROS 0 a 9:; <> = @, max.9 caracteres";
Blockly.Msg.OTTO9_MATRIXTEXT_TEXT = "texto de boca";
Blockly.Msg.OTTO9_CLEAR_TEXT = "borrar boca";
Blockly.Msg.OTTO9_CLEAR_TOOLTIP = "Apaga todos los LED de la matriz de la boca 8x8";
Blockly.Msg.OTTO9_ARMS_TEXT = "brazos";
Blockly.Msg.OTTO9_ARMS_TOOLTIP = "¬°mueve los brazos!";
Blockly.Msg.OTTO9_ARMS_CHOICE = [["manos arriba", "HANDSUP"], ["saludo izquierdo", "HANDWAVE1"], ["saludo derecho", "HANDWAVE2"]];