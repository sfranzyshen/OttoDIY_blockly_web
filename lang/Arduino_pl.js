'use strict';
goog.provide ( 'Blockly.Msg.pl');
goog.require ( 'Blockly.Msg');
// Electron window
Blockly.Msg.com1 = "Wybierz port USB.";
Blockly.Msg.com2 = "üîî Proszƒô wybierz port USB." ;
Blockly.Msg.check = "Sprawd≈∫...";
Blockly.Msg.upload = "Wy≈õlij...";
Blockly.Msg.error = "üîî B≈ÇƒÖd: Bloki nie sƒÖ po≈ÇƒÖczone.";
Blockly.Msg.verif = "üîî Najpierw sprawd≈∫ kod. "
Blockly.Msg.save = "Zapisz jako...";
Blockly.Msg.update = "Zaktualizuj.";
Blockly.Msg.new_update = "Dostƒôpna jest nowa wersja , czy chcesz ≈õciƒÖgnƒÖƒá i zaktualizowaƒá teraz ?" ;
Blockly.Msg.yes = "Tak";
Blockly.Msg.no = "Nie";
Blockly.Msg.uptodate = "üíØ Ta wersja jest nieaktualna!" ;
Blockly.Msg.download = "≈öciƒÖganie zako≈Ñczone, nastƒÖpi instalacja i restart aplikacji ..."
// common to all blocks
Blockly.Msg.HELPURL = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pin = "na pinie";
Blockly.Msg._AT = "na";
Blockly.Msg.AV = "do przodu";
Blockly.Msg.AR = "do ty≈Çu";
Blockly.Msg.high = "HIGH"; // do not translate
Blockly.Msg.low = "LOW"; // do not translate
Blockly.Msg.right = "w prawo";
Blockly.Msg.left = "w lewo";
Blockly.Msg.LetR = "w prawo i w lewo";
Blockly.Msg.direction = "kierunek";
Blockly.Msg.vitesse = "prƒôdko≈õƒá ";
// categories (menu)
Blockly.Msg.CAT_STOCKAGE = "‚äû Pamiƒôƒá";
Blockly.Msg.CAT_numerique = "- Cyfrowe";
Blockly.Msg.CAT_analogique = "~ Analogowe";
Blockly.Msg.CAT_wifi = "Ôº† Wifi";
Blockly.Msg.CAT_TAB = "‚ñ¶ Tabela";
Blockly.Msg.CAT_list = "‚ñ§ Lista";
Blockly.Msg.CAT_servo = "‚Ü∑ Servo";
Blockly.Msg.CAT_del = "‚òÑ LED";
Blockly.Msg.CAT_LOGIC = "‚áã Logiczne";
Blockly.Msg.CAT_MATH = "‚àë Matematyczne";
Blockly.Msg.CAT_TEXT = "‚ùù Tekstowe";
Blockly.Msg.CAT_VARIABLES = "‚Üù Zmienne";
Blockly.Msg.CAT_FUNCTIONS = "‚à¨ Funkcje";
Blockly.Msg.CAT_ARDUINO = "‚àû Struktura";
Blockly.Msg.CAT_ARDUINO_IN = "‚áÖ Wej≈õcie/Wyj≈õcie";
Blockly.Msg.CAT_ARDUINO_OUT = "‚ò∫ Wyjd≈∫";
Blockly.Msg.CAT_ARDUINO_TIME = "‚óå Czas";
Blockly.Msg.CAT_actionneur = "‚Üª Silnik";
Blockly.Msg.CAT_com = "‚òé Komunikacja";
Blockly.Msg.CAT_ARDUINO_COMM_SERIAL = "- Port szeregowy";
Blockly.Msg.CAT_ARDUINO_COMM_SOFTSERIAL = "- Port Soft Serial";
Blockly.Msg.CAT_ARDUINO_moteur="‚Üª Silnik krokowy";
Blockly.Msg.CAT_ultrason = "‚á£ Czujnik";
Blockly.Msg.CAT_bluetooth = "‚òè Bluetooth";
Blockly.Msg.CAT_ARDUINO_matrice8x8 = "‚ñë Usta LED";
Blockly.Msg.CAT_ARDUINO_matrice16x8 = "‚ñë Oczy LED";
Blockly.Msg.CAT_DFRobot_SHIELD_LCDKEYPAD = "‚ñÄ Wy≈õwietlacz LCD";
Blockly.Msg.CAT_iot = "‚òÅ IoT";
Blockly.Msg.CAT_html = "‚úâ HTML";
Blockly.Msg.CAT_DFPLAYER = "‚ô´ Audio";
Blockly.Msg.CAT_OTTO = "‚äü Otto";
Blockly.Msg.CAT_OTTOH = "‚äü Humanoid";
Blockly.Msg.CAT_OLED_U8G = "‚ñÄ OLED";
Blockly.Msg.CAT_NEOPIXEL = "‚òÑ Neopixel";
//Wireless  
Blockly.Msg.esp8266_init_tooltip = "inicjalizacja i po≈ÇƒÖczenie  modu≈Çu wifi z wybranymi parametrami.";
Blockly.Msg.esp8266_1 = "Esp 8266";
Blockly.Msg.esp8266_2 = "SSID";
Blockly.Msg.esp8266_3 = "key";
Blockly.Msg.esp8266_4 = "IP";
Blockly.Msg.esp8266_5 = "gateway";
Blockly.Msg.esp8266_6 = "mask";
Blockly.Msg.esp8266_7 = [["client", "client"], ["server", "server"]];
Blockly.Msg.esp8266_8 = "port";
Blockly.Msg.esp8266_9 = [["dynamic", "dynamic"], ["static", "static"]];
Blockly.Msg.esp8266_10 = "address";
Blockly.Msg.esp8266_recept_tooltip = "otrzymywanie";
Blockly.Msg.esp8266_url = "https://github.com/OttoDIY/esp";
Blockly.Msg.esp8266_html_tooltip = "";
Blockly.Msg.esp8266_send_html_tooltip = "";
Blockly.Msg.esp8266_send_html = "Wy≈õlij stronƒô HTML.";
Blockly.Msg.esp8266_start_tooltip = "";
Blockly.Msg.esp8266_start = "Urucom serwer.";
Blockly.Msg.esp8266_request_tooltip = "";
Blockly.Msg.esp8266_request = "je≈ºeli w zapytaniu znajdziemy";
Blockly.Msg.esp8266_request_container = "znaleziono";
//INTERRUPTION
Blockly.Msg.LKL_ATTACHINTERRUPT_PIN = 'Przerwij: kiedy';
Blockly.Msg.LKL_DETACHINTERRUPT_PIN = "Wy≈ÇƒÖcz przerwania na pinie.";
Blockly.Msg.LKL_TOOLTIP_INOUT_ATTACHINTERRUPT = "Opisuje dzia≈Çanie jakie ma nastƒÖpiƒá gdy zewnƒôtrzne przerwanie (mo≈ºliwe 4 tryby) nastƒÖpi na  pinie 2 lub 3.";
Blockly.Msg.LKL_TOOLTIP_INOUT_DETACHINTERRUPT = "Zablokuj poprzednio wprowadzone zewnƒôtrzne przerwanie.";
Blockly.Msg.LKL_MODE = 'Wykryto na pinie.';
// FIELDDROPDOWN
Blockly.Msg.note = [[ "DO \u2083", "261"], [ "RE \u2083", "293"], [ "MI \u2083", "329"], [ "FA \u2083", "349"], [ "SOL \u2083", "392"], [ "LA \u2083", "440"], [ "SI \u2083", "493"], [ "DO \u2084", "523 "], [" RE \u2084 "," 587 "], [" MI \u2084 "," 659 "], [" FA \u2084 "," 698 "], [" SOL \u2084 "," 784 "], [ "LA \u2084", "880"]];
Blockly.Msg.tempo = [["\u266B", "125"], ["\u266A", "250"], ["\u2669", "500"], ["ùÖóùÖ•", "1000"], ["ùÖù", "2000"]];
Blockly.Msg.on_off = [["on", "LOW"], ["off", "HIGH"]];
Blockly.Msg.menublink = [["wolno", "1000"], ["szybko", "100"]];
Blockly.Msg.AV_AR = [[Blockly.Msg.AV, "FORWARD"], [Blockly.Msg.AR, "BACKWARD"]]; // do not translate
Blockly.Msg.times = [["sekundy", "s"], ["milisekundy", "m"], ["mikrosekundy", "u"]];
Blockly.Msg.time = [["sekundy", "s"], ["milisekundy", "m"]];
Blockly.Msg.char_lcd = [[ "# 1", "1"], [ "# 2", "2"], [ "3", "3"], [ "# 4", "4"], [ "# 5", "5"], [ "# 6", "6"], [ "Nr. 7", "7"], [ "# 8", "8 "]];
Blockly.Msg.rxtx = [[ "2", "2"], [ "3", "3"], [ "4", "4"], [ "5", "5"], [ "6 "," 6 "], [" 7 "," 7 "], [" 8 "," 8 "], [" 9 "," 9 "], [" 10 "," 10 "], [" 11 "," 11 "], [" 12 "," 12 "], [" 13 "," 13 "]];
Blockly.Msg.FIELDDROPDOWN = [["1(stan wysoki)", Blockly.Msg.high], ["0(stan niski)", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_0_1 = [["UP", Blockly.Msg.high], ["DOWN", Blockly.Msg.low]];
Blockly.Msg.ligne = [["1", "0"], ["2", "1"]];
Blockly.Msg.colonne = [[ "1", "0"], [ "2", "1"], [ "3", "2"], [ "4", "3"], [ "5 "," 4 "], [" 6 "," 5 "], [" 7 "," 6 "], [" 8 "," 7 "], [" 9 "," 8 "], [" 10 "," 9 "], [" 11 "," 10 "], [" 12 "," 11 "], [" 13 "," 12 "], [" 14 "," 13 "], [" 15 "," 14 "], [" 16 "," 15 "]];
Blockly.Msg.FIELDDROPDOWN_ONOFF = [["w≈ÇƒÖcz", Blockly.Msg.high], ["wy≈ÇƒÖcz", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_ONOFF_matrice = [["1", "prawda"], ["0", "fa≈Çsz"]];
Blockly.Msg.FIELDDROPDOWN_av_ar = [[Blockly.Msg.AV, Blockly.Msg.high], [Blockly.Msg.AR, Blockly.Msg.low]];
Blockly.Msg.LKL_DROPDOWN = [['krawƒôd≈∫ wzrostu', 'RISING'], ['krawƒôd≈∫ spadku', 'FALLING'], ['zmiana stanu', 'CHANGE'], ['stan niski', Blockly. Msg.low]];
Blockly.Msg.irq = [['krawƒôd≈∫ wzrostu', 'Pin.IRQ_RISING'], ['krawƒôd≈∫ spadku', 'Pin.IRQ_FALLING'], ['stan wysoki', 'Pin.IRQ_HIGH_LEVEL'], ["stan niski "," Pin.IRQ_LOW_LEVEL "]];
Blockly.Msg.menudht = [["wilgotno≈õƒá", "h"], ["temperatura", "t"]];
Blockly.Msg.couleur = [["niebieski", "niebieski"], ["≈º√≥≈Çty", "≈º√≥≈Çty"], ["czerwony", "czerwony"], ["zielony", "zielony"]];
Blockly.Msg.sens = [["do przodu", "a"], ["skrƒôƒá w prawo", "d"], ["skrƒôƒá w lewo", "g"]];
//sensor
Blockly.Msg.VL53L0X="Laserowy czujnik odleg≈Ço≈õci.";
Blockly.Msg.VL53L0X_tooltip="Inicjalizuj czujnik.\nSensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.VL53L0X_distance="Odleg≈Ço≈õƒá mierzona przez laser.";
Blockly.Msg.VL53L0X_distance_tooltip="VL530X :\nZwraca odleg≈Ço≈õƒá mierzonƒÖ przez laser w mm.";
Blockly.Msg.bme280="Czujnik ci≈õnienia atmosferycznego.";
Blockly.Msg.bme280_tooltip="Inicjalizuj czujnik.\nSensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.bme280_pressure="Ci≈õnienie atmosferyczne.";
Blockly.Msg.bme280_pressure_tooltip="BME280 :\nZwraca ci≈õnienie atmosferyczne w hPa";
Blockly.Msg.inter="Wy≈ÇƒÖcznik gotowy.";
Blockly.Msg.inter_tooltip="Zwraca prawdƒô (fa≈Çsz) je≈ºeli wy≈ÇƒÖcznik jest (nie jest) na wskazanej pozycji.";
Blockly.Msg.mc005="Wykryto obecno≈õƒá na pinie.";
Blockly.Msg.mc005_tooltip="MC005:\nZwraca prawdƒô (fa≈Çsz) je≈ºeli wykryto (nie wykryto) obecno≈õci.";
Blockly.Msg.bp = "Naci≈õniƒôto przycisk na pinie.";
Blockly.Msg.bp_tooltip = "Zwraca prawdƒô (fa≈Çsz) je≈ºeli przycisk jest (nie jest) przyci≈õniƒôty.";
Blockly.Msg.dht11_tooltip="DHT11 :\nZwraca wilgotno≈õƒá powietrza (od 20 do 80%) lub \n  temperaturƒô (od 20 do 50ÔøΩC).";
Blockly.Msg.dht22_tooltip = "DHT22: \nZwraca wilgotno≈õƒá powietrza (od 0 do 100%) lub \n temperaturƒô (od -40 do 80 ÔøΩ C).";
Blockly.Msg.suiveur_ligne = "Czarna linia wykryta na pinie.";
Blockly.Msg.suiveur_ligne_tooltip = "CAP227: \nZwraca prawdƒô (fa≈Çsz) je≈ºeli na pinie wykryto (nie wykryto) czarnƒÖ liniƒô.";
Blockly.Msg.light = "Jasno≈õƒá na pinie.";
Blockly.Msg.light_tooltip = "Zwraca warto≈õƒá zale≈ºnie od jasno≈õci \n0: czer≈Ñ \n255: pe≈Çna jasno≈õƒá.";
Blockly.Msg.hum = "Wilgotno≈õƒá gleby na pinie.";
Blockly.Msg.hum_tooltip = "CAP 615: \nZwraca wilgotno≈õƒá gleby od 0 do 100%.";
Blockly.Msg.light_tooltip = "Zwraca warto≈õƒá zale≈ºnie od jasno≈õci \n0: czer≈Ñ \n255: pe≈Çna jasno≈õƒá.";
Blockly.Msg.grove_ldr = "Jasno≈õƒá na pinie.";
Blockly.Msg.grove_ldr_tooltip = "Zwraca mierzonƒÖ jasno≈õƒá \n0: brak ≈õwiat≈Ça \n100: bardzo intensywne ≈õwiat≈Ço.";
Blockly.Msg.potar = "Pozycja kursora na pinie.";
Blockly.Msg.potar_tooltip = "Zwraca warto≈õƒá zale≈ºnie od pozycji kursora \n0: kursor po lewej \n255: kursor po prawej.";
Blockly.Msg.lm35 = "Temperatura na pinie.";
Blockly.Msg.lm35_tooltip = "LM35: \nZwraca mierzonƒÖ temperaturƒô w stopniach Celsjusza (od 0 do 80 ÔøΩ.)";
Blockly.Msg.ultrason_1 = "dystans < limit";
Blockly.Msg.ultrason_2 = "Zwraca stan wysoki gdy zmierzony dystans (odleg≈Ço≈õƒá) jest mniejszy ni≈º limit.";
Blockly.Msg.ultrason_distance1 = "Odleg≈Ço≈õƒá mierzona ultrad≈∫wiƒôkami.";
Blockly.Msg.ultrason_tooltip = "HC-SR04: \n Czujnik d≈∫wiƒôkowy kt√≥ry pozwala na pomiar odleg≈Ço≈õci(od 3 cm do 4 m) \n podaƒá piny w Arduino do kt√≥rych bƒôdƒÖ pod≈ÇƒÖczone  TRIG i ECHO.";
Blockly.Msg.ultrason = "Piny ultrad≈∫wiƒôkowe.";
Blockly.Msg.ultrason_distance2 = "HC-SR04: \nZwraca odleg≈Ço≈õƒá zmierzonƒÖ przez czujnik w cm.";
Blockly.Msg.ultrason_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pir = "Wykryto ruch.";
Blockly.Msg.feu = "Wykryto p≈Çomie≈Ñ.";
Blockly.Msg.presence = "Wykryto przeszkodƒô.";////////////////////////////////////
Blockly.Msg.appui = "Dotkniƒôcie ";
Blockly.Msg.pir_tooltip = "HC-SR501: \nZwraca prawdƒô (fa≈Çsz) je≈ºeli wykryto (nie wykryto) obecno≈õci.";
Blockly.Msg.feu_tooltip = "CAP168: \nZwraca prawdƒô (fa≈Çsz) je≈ºeli wykryto (nie wykryto) p≈Çomie≈Ñ.";
Blockly.Msg.presence_tooltip = "CAP711: \nZwraca prawdƒô (fa≈Çsz) je≈ºeli wykryto (nie wykryto) przeszkodƒô.";
Blockly.Msg.appui_tooltip = "CAP831: \nreturns true (false) if a support is (is not) detected.";
// bluetooth ///////////////////////////
Blockly.Msg.bluetooth1 = "Dane otrzymane przez bluetooth.";
Blockly.Msg.bluetooth1_tooltip = "Otrzymywanie danych przez bluetooth \npod≈ÇƒÖcz p≈Çytkƒô HC-06 do pin√≥w 0 i 1 \n nie zamieniaj pin√≥w  Rx i Tx .";
Blockly.Msg.bluetooth2 = "Dane wys≈Çane przez bluetooth.";
Blockly.Msg.bluetooth2_tooltip = "Otrzymywanie danych przez bluetooth \npod≈ÇƒÖcz p≈Çytkƒô HC-06 do pin√≥w 0 i 1 \n nie zamieniaj pin√≥w  Rx i Tx .";
Blockly.Msg.bluetooth_init_tooltip = "";
Blockly.Msg.bluetooth_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy-plus"; // do not translate
//LCD screen  /////////////////////////////////////
Blockly.Msg.lcd_fond = "D√≥≈Ç";
Blockly.Msg.LCD = "Ekran LCD";
Blockly.Msg.LCDi2c_tooltip = "Inicjalizacja wy≈õwietlacza LCD I2C 2-linie po 16-znak√≥w , z pod≈õwietleniem RGB. \n Wy≈õwietlacz <-> Arduino \nSDA <--------> A4 \nSCL <- -------> A5 ";
Blockly.Msg.LCD_tooltip = "Inicjalizacja wy≈õwietlacza LCD, 2 linie po 16 znak√≥w, wskazujƒÖc piny do pod≈õwietlenia.";
Blockly.Msg.LCD_SHIELD_PRINT_HELPURL = "https://www.arduino.cc/en/Tutorial/HelloWorld";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT = "Poka≈º na wy≈õwietlaczu.";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT_tooltip = "Wy≈õwietl tekst we wskazanym po≈Ço≈ºeniu.";
Blockly.Msg.LCD_SHIELD_PRINT_TOOLTIP = "Napisz tekst(y) na wy≈õwietlaczu LCD.";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT1 = "linia 1";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT2 = "linia 2";
Blockly.Msg.LCD_line = "linia";
Blockly.Msg.LCD_col = "kolumna";
Blockly.Msg.LCD_raz = "wyczy≈õƒá / skazuj wy≈õwietlacz LCD.";
Blockly.Msg.LCD_raz_tooltip = "Wyczy≈õƒá wy≈õwietlacz.";
Blockly.Msg.lcd_aff_symbole = "Wy≈õwietl symbol.";
Blockly.Msg.lcd_aff_symbole_tooltip = "Poka≈º znak (symbol), kt√≥ry by≈Ç poprzednio zdefiniowany.";
Blockly.Msg.lcd_symbole = "Zdefiniuj znak";
Blockly.Msg.lcd_symbole_tooltip = "Utworzenie znaku na wy≈õwietlaczu LCD: \n 0 wy≈ÇƒÖcza piksel \n 1 w≈ÇƒÖcza piksel";
// structure  /////////////////////////
Blockly.Msg.loop = "‚àû Pƒôtla";
Blockly.Msg.init = "‚öôÔ∏è Ustawienia";
Blockly.Msg.base_setup_loop = "Inicjalizacja: \nInicjalizacja zmiennych, przypisanie pin√≥w ... \nFunkcja wykonywana jednokrotnie na poczƒÖtku programu \nFunkcja pƒôtla: \nTo jest g≈Ç√≥wna czƒô≈õƒá programu , wszystkie umieszczone tu bloki bƒôdƒÖ wykonywane w niesko≈Ñczono≈õƒá (kilka tysiƒôcy razy na sekundƒô) ";
Blockly.Msg.loop_tooltip = "Wszystkie umieszczone tu bloki bƒôdƒÖ wykonywane w niesko≈Ñczono≈õƒá (kilka tysiƒôcy razy na sekundƒô)";
Blockly.Msg.begin_tooltip = "Tego bloku u≈ºywamy w celu okre≈õlenia kolejno≈õci w jakiej ma byƒá wykonywany program";
Blockly.Msg.begin = "üèÅ START";
Blockly.Msg.def = "‚öôÔ∏è Deklaracja";
Blockly.Msg.def_tooltip = "Wszystkie bloki tutaj umieszczone bƒôdƒÖ wykonane tylko jeden raz , w tym miejscu umieszcza siƒô konfiguracjƒô wszelkich czujnik√≥w lub element√≥w wykonawczych ";
Blockly.Msg.END = "üèÅ KONIEC";
Blockly.Msg.END_tooltip = "Koniec programu , bloki umieszczone poni≈ºej bƒôdƒÖ ignorowane";
Blockly.Msg.code_tooltip = "Tutaj wpisz instrukcje, kt√≥re nie sƒÖ ujƒôte w blokach";
//matrix ////////////////////////////////
Blockly.Msg.matriceLC = "Wprowad≈∫ liniƒô LED.";
Blockly.Msg.matrice_create_aff = "Utw√≥rz blok 'wy≈õwietl symbol %1'.";
Blockly.Msg.matrice_create_symbole = "Utw√≥rz blok 'ustaw symbol %1'.";
Blockly.Msg.matrice = "Matryca";
Blockly.Msg.matrice8x8_tooltip = "Inicjalizacja matrycy 64 Led, trzeba wskazaƒá piny w arduino, do kt√≥rych pod≈ÇƒÖczone : DIN, CLK i CS.";
Blockly.Msg.matrice8x8_symbole = "Zdefiniuj symbol.";
Blockly.Msg.matrice8x8_symbole_tooltip = "Definicja symbolu dla matrycy: \n 0 wy≈ÇƒÖcza  LED \n 1 w≈ÇƒÖcza LED.";
Blockly.Msg.matrice8x8_efface = "Skasuj / wyma≈º matrycƒô.";
Blockly.Msg.matrice8x8_aff = "Wy≈õwietl symbol.";
Blockly.Msg.matrice8x8_binaire_tooltip = "1 w≈ÇƒÖcza diodƒô LED w matrycy a 0 jƒÖ wy≈ÇƒÖcza.";
Blockly.Msg.matrice8x8_del_tooltip = "W≈ÇƒÖcza (wy≈ÇƒÖcza) diodƒô LED w matrycy wskazujƒÖc jej wsp√≥≈Çrzƒôdne \n Uwaga zliczanie rozpoczyna siƒô od 0.";
Blockly.Msg.matrice8x8_aff_tooltip = "Wy≈õwietla poprzednio zdefiniowany symbol.";
Blockly.Msg.matrice8x8_efface_tooltip = "Wy≈ÇƒÖcza wszystkie diody LED w matrycy.";
Blockly.Msg.matrice8x8_helpurl = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.matrice16x8_tooltip = "Inicjalizacja tablicy 128 Led. \nMatryca <-> Arduino \nSDA <--------> A4 \nSCL <--------> A5.";
Blockly.Msg.matrice16x8_symbole = "Zdefiniuj symbol.";
Blockly.Msg.matrice16x8_symbole_tooltip = "Definicja symbolu dla matrycy: \n 0 wy≈ÇƒÖcza LED \n 1 w≈ÇƒÖcza LED.";
Blockly.Msg.matrice16x8_efface = "Wy≈ÇƒÖcza wszystkie diody LED w matrycy.";
Blockly.Msg.matrice16x8_aff = "Wy≈õwietl symbol.";
Blockly.Msg.matrice16x8_binaire_tooltip = "1 w≈ÇƒÖcza diodƒô LED w matrycy a 0 jƒÖ wy≈ÇƒÖcza.";
Blockly.Msg.matrice16x8_del_tooltip = "W≈ÇƒÖcza (wy≈ÇƒÖcza) diodƒô LED w matrycy wskazujƒÖc jej wsp√≥≈Çrzƒôdne \n Uwaga zliczanie rozpoczyna siƒô od 0.";
Blockly.Msg.matrice16x8_aff_tooltip = "Wy≈õwietla poprzednio zdefiniowany symbol.";
Blockly.Msg.matrice16x8_efface_tooltip = "Wy≈ÇƒÖcza wszystkie diody LED w matrycy.";
Blockly.Msg.matrice16x8_helpurl = "https://wikifactory.com/+OttoDIY/humanoid";
//time ////////////////////
Blockly.Msg.millis ="Up≈Çyw czasu w ms.";
Blockly.Msg.millis_start="Rozpocznij bieg czasu .";
Blockly.Msg.millis_tooltip="";
Blockly.Msg.millis_start_tooltip="";
Blockly.Msg.ARDUINO_INOUT_Pulsein = "Podaje / zwraca czas trwania  impulsu w mikrosekundach UP lub DOWN podanego na dany pin. Je≈ºeli warto≈õƒá parametru jest HIGH, blok czeka a≈º pin przejdzie w stan HIGH, wtedy rozpoczyna odliczanie, i czeka a≈º pin przejdzie z powrotem w stam LOW i zatrzymuje odliczanie czasu.";
Blockly.Msg.ARDUINO_BASE_DELAY = "‚è≤ Czekaj.";
Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP = "Podaje czas czekania w sekundach, millisekundach lub  mikrosecundach. \nProgram w tym czasie nie wykonuje ≈ºadnych instrukcji.";
Blockly.Msg.millis1 = "Czas w";
Blockly.Msg.millis2 = "od poczƒÖtku.";
Blockly.Msg.ARDUINO_SINCE_PROGRAM_STARTED_TOOLTIP = "Zwraca czas trwania w sekundach, millisekundach lub  mikrosekundach od momentu rozpoczƒôcia programu. ";
Blockly.Msg.ARDUINO_PULSEIN = "Czas trwania impulsu.";
Blockly.Msg.tempo_helpurl = "https://www.arduino.cc/en/tutorial/blink";
Blockly.Msg.tempo_tooltip = "Ten blok sprawdza czy up≈ÇynƒÖl wskazany czas, je≈ºeli tak jest w√≥wczas wykonywane sƒÖ bloki umieszczone wewnƒÖtrz." ;
Blockly.Msg.tempo1 = "Wszystko.";
//OLED //////////////////////////////
Blockly.Msg.lp2i_u8g_draw_string = "Wy≈õwietlacz OLED I2C.";
Blockly.Msg.lp2i_u8g_draw_string_Text = "Tekst do wy≈õwietlenia =";
Blockly.Msg.lp2i_u8g_draw_string_X = "rzƒÖd x (127 maks) = .";
Blockly.Msg.lp2i_u8g_draw_string_Y = "linia y (63 maks) = .";
Blockly.Msg.lp2i_u8g_draw_4strings = "Wy≈õwietlacz OLED I2C.";
Blockly.Msg.lp2i_u8g_draw_4strings_texts_to_display = "Tekst do wy≈õwietlenia :";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line1 = "linia 1 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line2 = "linia 2 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line3 = "linia 3 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line4 = "linia 4 =";
Blockly.Msg.lp2i_u8g_print = "Wy≈õwietlacz OLED I2C.";
Blockly.Msg.lp2i_u8g_print_N = "Numer do wy≈õwietlenia ="
Blockly.Msg.lp2i_u8g_print_X = "rzƒÖd x (127 maks) = .";
Blockly.Msg.lp2i_u8g_print_Y = "linia y (63 maks) = .";
Blockly.Msg.lp2i_u8g_4draw_print = "Wy≈õwietlacz OLED I2C.";
Blockly.Msg.lp2i_u8g_4draw_print_to_display = "Do wy≈õwietlenia :";
Blockly.Msg.lp2i_u8g_4draw_print_Text_line1 = "linia 1 =";
Blockly.Msg.lp2i_u8g_4draw_print_N1 = "Numer 1 (na ko≈Ñcu) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line2 = "linia 2 =";
Blockly.Msg.lp2i_u8g_4draw_print_N2 = "Numer 2 (na ko≈Ñcu) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line3 = "linia 3 =";
Blockly.Msg.lp2i_u8g_4draw_print_N3 = "Numer 3 (na ko≈Ñcu) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line4 = "linia 4 =";
Blockly.Msg.lp2i_u8g_4draw_print_N4 = "Numer 4 (na ko≈Ñcu) ="
// LED ////////////////////////////////
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT = "Dioda na p≈Çytce (arduino).";
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP = "Wy≈ÇƒÖcza lub w≈ÇƒÖcza diodƒô LED na p≈Çytce Arduino.";
Blockly.Msg.blink = "≈öwiat≈Ço pulsujƒÖce LED";
Blockly.Msg.blink_tooltip = "Dioda LED na p≈Çytce b≈Çyska/miga 1 lub 10 na sekundƒô.";
Blockly.Msg.del = "Dioda LED na pinie.";
Blockly.Msg.del_tooltip = "W≈ÇƒÖcza (wy≈ÇƒÖcza) diodƒô LED pod≈ÇƒÖczonƒÖ do wskazanego pinu.";
Blockly.Msg.bargraphe = "Bargraf";
Blockly.Msg.bargraphe_allume="W≈ÇƒÖcz LEDy do";
Blockly.Msg.bargraphe_allume_tooltip="0 nie zapala ≈ºadnej diody LED \n2,5 zapala pierwsze 2 diody LED , 3 zapala po≈Çowƒô a \n10 zapala wszystkie diody LED.";
Blockly.Msg.bargraphe_tooltip = "Modu≈Ç (pasek) graficzny zbudowany z 10 diod LED (8 zielonych , 1 ≈º√≥≈Çta i 1 czerwona), trzeba wskazaƒá piny na p≈Çytce arduino do kt√≥rych bƒôdƒÖ pod≈ÇƒÖczone DCKI i DI.";
Blockly.Msg.rvb_init="LED RGB";
Blockly.Msg.rvb_init_tooltip="Wskazuje piny PWM na p≈Çytce arduino, do kt√≥rych pod≈ÇƒÖczyƒá diodƒô RGB.";
Blockly.Msg.rvb_set="Poka≈º kolor.";
Blockly.Msg.rvb_set_tooltip="Wy≈õwietla kolor wskazujƒÖc warto≈õci sk≈Çadowe kolor√≥w (czerwony, zielony, niebieski).";
Blockly.Msg.pixel1 = "RGB NeoPixel";
Blockly.Msg.pixel2 = "uaktualnij piksele";
Blockly.Msg.pixel3 = "z kolorem ";
Blockly.Msg.pixel4 = "numer";
Blockly.Msg.pixel5 = "ustaw jasno≈õƒá piksela na";
Blockly.Msg.pixel6 = "ustaw piksel";
Blockly.Msg.pixel1_tooltip="modu≈Ç neopixel RGB , podaj do jakiego pina pod≈ÇƒÖczyƒá oraz liczbƒô pikseli.";
Blockly.Msg.pixel2_tooltip="pozuje wprowadzone zmiany";
Blockly.Msg.pixel5_tooltip="Ustaw jasno≈õƒá pikseli na (od 0 do 255).";
Blockly.Msg.pixel3_tooltip="Wybierz piksel do zapalenia oraz jego kolor. \n Uwaga numerowanie rozpoczyna siƒô od 0.";
// output  //////////////////////////////////////////
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1 = "Ustaw pin cyfrowy DIGITAL.";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP = "Zapisz stan logiczny  0 lub 1 do wskazanego wyj≈õcia.";
Blockly.Msg.toggle = "Prze≈ÇƒÖcz stan pinu.";
Blockly.Msg.toggle_tooltip = "Prze≈ÇƒÖcz: \n Zapisz stan logiczny 0 je≈ºeli poprzednio by≈Ço 1 (i na odwr√≥t) na wskazanym wyj≈õciu.";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1 = "Ustaw pin PWM.";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP = "Wprowad≈∫ warto≈õƒá pomiƒôdzy 0 i 255 na wskazane wyj≈õcie.";
// input /////////////////////////////
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT = "Stan pinu CYFROWEGO.";
Blockly.Msg.in_pullup = "Pull-Up";
Blockly.Msg.in_pullup_tooltip = "Zwraca stan logiczny (0 lub 1) wskazanego pinu \ndomy≈õlnie zwraca 1 (stan wysoki) je≈ºeli pull-up jest w≈ÇƒÖczone. ";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP = "Odczytuje stan logiczny  0 lub 1 na pinie cyfrowym. ";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT = "Stan pinu ANALOGOWEGO.";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP = "Zwraca warto≈õƒá pomiƒôdzy 0 i 1023. ";
// audio ///////////////////////////
Blockly.Msg.play = "Zagraj.";
Blockly.Msg.play_tooltip = "Zagraj nutƒô.";
Blockly.Msg.play_helpurl = "";
Blockly.Msg.beep = "'Pip' na pinie.";
Blockly.Msg.beep_TOOLTIP = "'Pip' ( 440Hz przez 1s) na wybranym pinie.";
Blockly.Msg.ARDUINO_TONE_INPUT1 = "Emituje d≈∫wiƒôk na pinie.";
Blockly.Msg.ARDUINO_TONE_INPUT2 = "Czƒôstotliwo≈õƒá (Hz)";
Blockly.Msg.ARDUINO_TONE_INPUT3 = "Czas trwania (ms)";
Blockly.Msg.ARDUINO_TONE_TOOLTIP = "Emituje d≈∫wiƒôk na wybranym pinie, d≈∫wiƒôk o wybranej (ustawionej )czƒôstotliwo≈õci i przez ustawiony czas.";
Blockly.Msg.ARDUINO_NOTONE_INPUT = "Zatrzymaj d≈∫wiƒôk na pinie.";
Blockly.Msg.ARDUINO_NOTONE_TOOLTIP = "Zatrzymuje d≈∫wiƒôk na wybranym pinie.n";
Blockly.Msg.lp2i_mp3_helpurl = "https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299";
Blockly.Msg.lp2i_mp3_Volume = "G≈Ço≈õno≈õƒá [0-48]";
Blockly.Msg.lp2i_mp3_autoplay = "AutoPlay (autoodtwarzanie)";
Blockly.Msg.lp2i_mp3 = "Odtwarzacz MP3";  ////////////////////////////////
Blockly.Msg.lp2i_mp3_tooltip = "DF Player Mini mp3: \n inicjalizacja modu≈Çu, g≈Ço≈õno≈õƒá i tryb pracy \n Modu≈Ç MP3 <-> Arduino \nRx (2) <------------- -> Tx (1) . ";
Blockly.Msg.lp2i_mp3_play = "Odtwarzaj plik mp3.";
Blockly.Msg.lp2i_mp3_play_track_tooltip = "Odtwarzaj (zagraj) wybranƒÖ piosenkƒô.";
Blockly.Msg.lp2i_mp3_play_tooltip = "Odtwarza bie≈ºƒÖcƒÖ piosenkƒô.";
Blockly.Msg.lp2i_mp3_pause = "Zatrzymaj odtwarzanie pliku mp3.";
Blockly.Msg.lp2i_mp3_pause_tooltip = "Zatrzymaj bie≈ºƒÖcƒÖ piosenkƒô.";
Blockly.Msg.lp2i_mp3_prev = "Odczytaj poprzedni plik mp3.";
Blockly.Msg.lp2i_mp3_prev_tooltip = "Odtwarzaj poprzedniƒÖ piosenkƒô.";
Blockly.Msg.lp2i_mp3_vol = "Ustaw g≈Ço≈õno≈õƒá na :";
Blockly.Msg.lp2i_mp3_vol_tooltip = "Ustaw g≈Ço≈õno≈õƒá na wybranƒÖ warto≈õƒá [0-48].";
Blockly.Msg.lp2i_mp3_next = "Odczytaj nastƒôpny plik mp3.";
Blockly.Msg.lp2i_mp3_next_tooltip = "Odtwarza nastƒôpnƒÖ piosenkƒô.";
// servomotor /////////////////////////
Blockly.Msg.ARDUINO_SERVO_MOVE_INPUT1 = "Obr√≥ƒá o .";
Blockly.Msg.ARDUINO_SERVO_MOVE_DEGREE = "kƒÖt [0¬∞-180¬∞]";
Blockly.Msg.ARDUINO_SERVO_MOVE_TOOLTIP = "Mo≈ºliwy obr√≥t w zakresie 0 i 180 stopni.";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TEXT = "Obracaj.";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TOOLTIP = "Obr√≥ƒá serwo pod≈ÇƒÖczone do podanego pinu, z podanƒÖ prƒôdko≈õciƒÖ i w podanym kierunku.";
//engine //////////////////////////////////
Blockly.Msg.mot_tooltip = "P≈Çytka rozszerzajƒÖca L293D , kontroler silniczk√≥w : \n uruchamia obydwa silniczki (M1 and M2) w celu jazdy lub skrƒôtu, prƒôdko≈õƒá mo≈ºna ustawiƒá w zakresie pomiƒôdzy 0 i 90.";
Blockly.Msg.mot_stop = "Stop";
Blockly.Msg.mot_stop_tooltip = "P≈Çytka rozszerzajƒÖca L293D \n zatrzymaj obydwa silniczki (M1 i M2).";
Blockly.Msg.moteur = "Uruchom silnik.";
Blockly.Msg.moteurstop = "Zatrzymaj silnik.";
Blockly.Msg.moteur_tooltip = "Uruchamia silnik (DC) pod≈ÇƒÖczony do podanego pinu, z wybranƒÖ prƒôdko≈õciƒÖ \nprƒôdko≈õƒá = 0 -> silnik wy≈ÇƒÖczony.";
Blockly.Msg.moteurdagu_tooltiprs040 = "P≈Çytka RS 040 : \n uruchamia jeden z 2 silniczk√≥w pod≈ÇƒÖczonych do wyj≈õcia na tej p≈Çytce, prƒôdko≈õƒá mo≈ºna ustawiƒá w zakresie pomiƒôdzy 0 i 90.";
Blockly.Msg.moteurdagu_tooltiprs040stop = "P≈Çytka RS 040: \nzatrzymuje jeden z 2 silniczk√≥w.";
Blockly.Msg.moteurdagu_tooltiprs027 = "P≈Çytka RS 027: \n uruchamia jeden z 2 silniczk√≥w pod≈ÇƒÖczonych do wyj≈õcia na tej p≈Çytce, prƒôdko≈õƒá mo≈ºna ustawiƒá w zakresie pomiƒôdzy 0 i 90.";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR1 = "v1 - silnik DC";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR2 = "v2 - silnik DC";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_DIRECTION = "kierunek";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_VITESSE = Blockly.Msg.vitesse+"[0-255]";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_AVANT = "do przodu";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_ARRIERE = "do ty≈Çu";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_STOP = "zatrzymaj";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP1 = "v1 - silnik krokowy";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP2 = "v2 - silnik krokowy";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_CONNECT = "pin";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_PPT = "nie na obr√≥t";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_RPM = "prƒôdko≈õƒá (obr/min)";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_NB_PAS = "liczba/ilo≈õƒá krok√≥w";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC1 = "silnik DC 1";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC2 = "silnik DC 2";
Blockly.Msg.m_pap="silnik krokowy ";
Blockly.Msg.m_pap_step="krok";
Blockly.Msg.m_pap_step1="do przodu";
Blockly.Msg.m_pap_tooltip = "Inicjalizacja / uruchomienie silnika krokowego. \nWybierz ilo≈õƒá krok√≥w, prƒôdko≈õƒá w obr/min speed in i pin do kt√≥rego pod≈ÇƒÖczyƒá.";
Blockly.Msg.m_pap_step_tooltip = "Uruchomienie silnika krokowego w podanej liczbie krok√≥w, nastƒôpne instrukcje bƒôdƒÖ wykonane dopiero po wykonaniu przez silnik obrotu.";
// serial ////////////////////////////////////////
Blockly.Msg.Serial_Init = "W≈ÇƒÖczenie portu szeregowego.";
Blockly.Msg.Serial_Init_tooltip = "Ustanawia prƒôdko≈õƒá komunikacji w ilo≈õci znak√≥w na sekundƒô.";
Blockly.Msg.Serial_Write = "Wy≈õlij do portu szeregowego.";
Blockly.Msg.Serial_write_tooltip = "Wysy≈Ça dane do portu szeregowego.";
Blockly.Msg.Serial_read = "Odczyt danych w porcie szeregowym.";
Blockly.Msg.Serial_read_tooltip = "Zwraca pierwsze dostƒôpne dane w porcie szeregowym lub '-1' je≈ºeli nie ma danych.";
Blockly.Msg.Serial_available = "Ilo≈õƒá danych w porcie szeregowym.";
Blockly.Msg.Serial_available_tooltip = "Zwraca ilo≈õƒá/liczbƒô bajt√≥w dostƒôpnych w porcie szeregowym lub 0 gdy nie ma danych.";
Blockly.Msg.Serial_saut = "podzia≈Ç linii";
Blockly.Msg.Serial_saut_tooltip = "Zwraca podzia≈Ç linii w porcie szeregowym .";
Blockly.Msg.Serial_space = "Separator";
Blockly.Msg.Serial_space_tooltip = "Zwraca odstƒôp / spacjƒô w porcie szeregowym.";
Blockly.Msg.repl_read = "U≈ºytkownik wprowadzi≈Ç komendƒô/polecenie.";
// software serial ///////////////////////////////
Blockly.Msg.SSERIAL_Init = "Port programu na Rx.";
Blockly.Msg.SSERIAL_tooltip = "Utworzenie nowego portu komunikacji o podanej prƒôdko≈õci na podanym pinie.";
Blockly.Msg.SSERIAL_Read = "Odczyt danych na porcie programu.";
Blockly.Msg.SSERIAL_Read_tooltip = "Zwraca pierwsze dostƒôpne dane w porcie programu lub '-1' je≈ºeli nie ma danych.";
Blockly.Msg.SSERIAL_Write = "Wy≈õlij do portu programowego.";
Blockly.Msg.SSERIAL_Write_tooltip = "Wy≈õlij dane do portu programowego.";
Blockly.Msg.SSERIAL_Read_tooltip = "Zwraca pierwsze dostƒôpne dane w porcie programu lub '-1' je≈ºeli nie ma danych.";
Blockly.Msg.SSERIAL_Available = "Ilo≈õƒá danych w porcie programowym.";
Blockly.Msg.SSERIAL_Available_tooltip = "Zwraca ilo≈õƒá / liczbƒô bajt√≥w dostƒôpnych w porcie programowym lub 0 gdy nie ma danych.";
////////////////////////////OTTO DIY Robot/////////////////////
Blockly.Msg.OTTO9_HOME_TEXT = "Pozycja poczƒÖtkowa.";
Blockly.Msg.OTTO9_HOME_TOOLTIP = "Otto wraca do pozycji poczƒÖtkowej. Pozycja wyprostowana.";
Blockly.Msg.OTTO9_DIY_URL = "https://wikifactory.com/+OttoDIY/otto-diy";
Blockly.Msg.OTTO9_HUMANOID_URL = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.OTTO9_CALIBRATION='Kalibruj.';
Blockly.Msg.OTTO9_CALIBRATION_LEG='noga ';
Blockly.Msg.OTTO9_CALIBRATION_FOOT='stopa ';
Blockly.Msg.OTTO9_CALIBRATION_ARM='ramiƒô ';
Blockly.Msg.OTTO9_CALIBRATION_TOOLTIP='Stopniowo, po kolei wprowadzaj ma≈Çe, dodatnie lub ujemne warto≈õci , do momentu gdy jest ca≈Çkowicie prosto (90¬∫).';
Blockly.Msg.OTTO9_EEPROM_TEXT= 'Zapisz obciƒôcia w pamiƒôci EEPROM.';
Blockly.Msg.OTTO9_EEPROM_TOOLTIP= "U≈ºywaƒá tylko po uzyskaniu ca≈Çkowitego wyprostowania (90¬∫) , nastƒôpnie usunƒÖƒá ten blok przed kolejnymi fazami programowania. ";
Blockly.Msg.OTTO9_MOVE_TEXT = "Ruch";
Blockly.Msg.OTTO9_MOVE_TOOLTIP = "Podstwawowe ruchy Otto.";
Blockly.Msg.OTTO9_MOVE_CHOICE = [["‚Üë do przodu", "DO PRZODU"], ["‚Üì do ty≈Çu", "DO TY≈ÅU"], ["‚Ü∫ skrƒôƒá w lewo", "W LEWO"], ["‚Üª skrƒôƒá w prawo", "W PRAWO"], ["przechyl siƒô w lewo", "PRZECHYL W LEWO"], ["przechyl siƒô w prawo", "PRZECHYL W PRAWO"], ["potrzƒÖsaj lewƒÖ nogƒÖ", "POTRZƒÑSAJ LEWƒÑ"], ["potrzƒÖsaj prawƒÖ nogƒÖ", "POTRZƒÑSAJ PRAWƒÑ"], ["w g√≥rƒô", "podskocz"]];
Blockly.Msg.OTTO9_MOVEW_CHOICE = [["‚Üë do przodu", "DO PRZODU"], ["‚Üì do ty≈Çu", "DO TY≈ÅU"], ["‚Ü∫ skrƒôƒá w lewo", "W LEWO"], ["‚Üª skrƒôƒá w prawo", "W PRAWO"]]; 
Blockly.Msg.OTTO9_MOVE_SPEED_TEXT = "prƒôdko≈õƒá";
Blockly.Msg.OTTO9_MOVE_SPEED_CHOICE = [["normalnie", "1000"],["wolno", "2000"],["bardzo wolno", "3000"] , ["szybko", "750"], ["bardzo szybko", "500"], ["mega szybko", "250"]];
Blockly.Msg.OTTO9_MOVEW_SPEED_CHOICE = [["normalnie", "45"],["wolno", "20"],["bardzo wolno", "10"] , ["szybko", "60"], ["bardzo szybko", "90"]];
Blockly.Msg.OTTO9_DANCE_TEXT = "Taniec";
Blockly.Msg.OTTO9_DANCE_TOOLTIP = "Otto ta≈Ñczy!";
Blockly.Msg.OTTO9_DANCE_CHOICE = [["moonwalk ‚üµ", "moonwalkerWLEWO"],  ["moonwalk ‚ü∂", "moonwalkerWPRAWO"],["krzy≈ºowanie ‚üµ", "krzy≈ºowanieWLEWO"],["krzy≈ºowanie ‚ü∂", "krzy≈ºowanieWPRAWO"], ["flapping ‚Üë", "flappingDOPRZODU"], ["flapping ‚Üì", "flappingDOTY≈ÅU"]];
Blockly.Msg.OTTO9_DANCE_SIZE_TEXT = "wielko≈õƒá ta≈Ñca";
Blockly.Msg.OTTO9_DANCE_SIZE_CHOICE = [["normalna", "25"], ["ma≈Ça", "10"], ["du≈ºa", "40"]];
Blockly.Msg.OTTO9_DO_TEXT = "wykonaj";
Blockly.Msg.OTTO9_DO_TOOLTIP = "Skomplikowane ruchy Otto.";
Blockly.Msg.OTTO9_DO_CHOICE = [ ["swing", "swing"], ["updown", "updown"], ["tiptoeSwing", "tiptoeSwing"], ["jitter", "jitter"], ["ascendingTurn", "ascendingTurn"]];
Blockly.Msg.OTTO9_GESTURE_TEXT = "gesty";
Blockly.Msg.OTTO9_GESTURE_TOOLTIP = "Emocje, d≈∫wiƒôki po≈ÇƒÖczone  z ruchami.";
Blockly.Msg.OTTO9_GESTURE_CHOICE = [["üòÉ szczƒô≈õliwy1", "OttoSuperHappy"],["üôÇ szczƒô≈õliwy2", "OttoHappy"], ["üôÅ smutny", "OttoSad"], ["üò¥ zaspany", "OttoSleeping"], ["üòï zagubiony", "OttoConfused"], ["üò∞ p≈Çaczliwy", "OttoFretful"], ["üòç kocha", "OttoLove"], ["üò° z≈Çy", "OttoAngry"], ["ü§© czaruje", "OttoMagic"], ["üòê fala", "OttoWave"], [" üòé zwyciƒôzca", "OttoVictory"], ["üòû zawiedziony", "OttoFail"], ["üí© farciarz", "OttoFart"]];
Blockly.Msg.OTTO9_SOUND_TEXT = "Dzwiƒôki";
Blockly.Msg.OTTO9_SOUND_TOOLTIP = "D≈∫wiƒôki/odg≈Çosy emocjonalne";
Blockly.Msg.OTTO9_SOUND_CHOICE = [ ["üòÉ szczƒô≈õliwy1", "S_superHappy"], ["üôÇ szczƒô≈õliwy2", "S_happy"], ["üòä szczƒô≈õliwy3", "S_happy_short"], ["üôÅ smutny", "S_sad"], ["üòï zagubiony", "S_confused"], ["ü§ó milusi", "S_cuddly"], ["üòÆ Oh", "S_OhOoh"], ["üòØ OhOoh", "S_OhOoh2"], ["üò≤ zaskoczony", "S_surprise"],["ü§ñ pod≈ÇƒÖczony", "S_connection"], [" ü§ñ od≈ÇƒÖczony", "S_disconnection"], ["üëá naci≈õniƒôcie", "S_buttonPushed"], ["‚ùó 1", "S_mode1"], ["‚ùó‚ùó 2", "S_mode2"], ["‚ùó‚ùó‚ùó 3", "S_mode3"], ["üí§ spanie", "S_sleeping"], ["üí© farciarz1", "S_fart1"], ["üí© farciarz2", "S_fart2"], ["üí© farciarz3", "S_fart3"],];
Blockly.Msg.OTTO9_GETDISTANCE_TEXT = "Odleg≈Ço≈õƒá [cm].";
Blockly.Msg.OTTO9_GETDISTANCE_TOOLTIP = "Ustawianie zakresu pomiƒôdzy  2cm do 400cm.";
Blockly.Msg.OTTO9_GETOBSTACLE_TEXT = "przeszkoda";
Blockly.Msg.OTTO9_OBSTACLE_CHOICE = [["blisko", "10"],["bardzo blisko", "3"],["daleko", "30"]];
Blockly.Msg.OTTO9_GETNOISE_TEXT = "Ha≈Ças";
Blockly.Msg.OTTO9_GETNOISE_TOOLTIP = "100 to cicho, 500 to g≈Ço≈õno a ponad  1000 to bardzo g≈Ço≈õno, ustaw te≈º czu≈Ço≈õƒá sensora. ";
Blockly.Msg.OTTO9_GETTOUCH_TEXT = "Dotyk";///////////////////////////////////////////
Blockly.Msg.OTTO9_GETTOUCH_TOOLTIP = "U≈ºyj instrukcji warunkowej 'if'.";
Blockly.Msg.OTTO9_GETG_TEXT = "Ruch";
Blockly.Msg.OTTO9_MOUTH_TEXT = "Usta";
Blockly.Msg.OTTO9_MOUTH_TOOLTIP = "Emocje na ustach dla matrycy LED 8x8 LED #0-30";
Blockly.Msg.OTTO9_MOUTH_CHOICE = [["üòÉ szczƒô≈õliwy1", "happyOpen"],["üôÇ szczƒô≈õliwy2", "happyClosed"], ["üòä u≈õmiech", "smile"], ["üò¶ smutny1", "23"], ["üôÅ smutny2", "24"], ["üòÆ zaskoczony1", "smallSurprise"], ["üò≤ zaskoczony2", "bigSurprise"], ["üòï zagubiony", "confused"],["üòõ pokazuje jƒôzyk", "tongueOut"],["üôÉ g≈Çupi", "culito"],  ["üòë powa≈ºny", "lineMouth"], ["üôÑ zmartwiony", "21"], ["üíñ serce", "heart"], ["ü¶á v1", "vamp1"], ["ü¶á v2", "vamp2"], ["‚ùå nie", "xMouth"], ["‚úÖ OK", "okMouth"],["‚ùì?", "27"], ["‚ö° b≈Çyskawica", "thunder"]];
Blockly.Msg.OTTO9_EYES_TEXT = "Oczy";
Blockly.Msg.OTTO9_EYES_TOOLTIP = "Emocje na oczach dla matrycy LED 16x8 i2C.";
Blockly.Msg.OTTO9_EYES_CHOICE = [["üòÉ szczƒô≈õliwy1", "happy_bmp"],["üôÇ szczƒô≈õliwy2", "eyes_bmp"], ["üò¶ smutny", "sad_bmp"], ["üò° z≈Çy1", "angry_bmp"], ["üò° z≈Çy2", "angry2_bmp"], ["üò∞ p≈Çaczliwy", "freetful_bmp"], ["üòï zagubiony", "confused_bmp"],["üò¥ zaspany", "sleep_bmp"],["üòç kocha", "love_bmp"],  ["üòë fala", "wave_bmp"], ["ü§© czarodziej", "magic_bmp"], ["üòû smutny", "fail_bmp"], ["ü§ñ logo", "logo_bmp"], ["‚ùå‚ùå nie", "XX_bmp"], ["x x", "xx_bmp"],["‚ñâ", "full_bmp"]];
Blockly.Msg.OTTO9_EYESTEXT_TEXT = "Tekst na oczy";
Blockly.Msg.OTTO9_EYES_CLEAR_TEXT = " Wyczy≈õƒá text na oczach";
Blockly.Msg.OTTO9_MATRIX_TOOLTIP = "Ograniczenie do du≈ºych liter i cyfr  0 do  9 : ; < >  = @, maks.9 znak√≥w.";
Blockly.Msg.OTTO9_MATRIXTEXT_TEXT = "Tekst na usta";
Blockly.Msg.OTTO9_CLEAR_TEXT = " Wyczy≈õƒá tekst na usta.";
Blockly.Msg.OTTO9_CLEAR_TOOLTIP = "Wy≈ÇƒÖcz wszystkie diody LED na matrycy LED usta 8x8";
Blockly.Msg.OTTO9_ARMS_TEXT = "Rƒôce";
Blockly.Msg.OTTO9_ARMS_TOOLTIP = "Poruszaj rƒôkami!";
Blockly.Msg.OTTO9_ARMS_CHOICE = [["rƒôce do g√≥ry", "HANDSUP"], ["machaj w lewo", "HANDWAVE1"], ["machaj w prawo", "HANDWAVE2"]];